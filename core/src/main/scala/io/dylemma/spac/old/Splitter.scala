package io.dylemma.spac.old

import io.dylemma.spac.ContextMatcher
import io.dylemma.spac.old.handlers._

import scala.language.higherKinds

/** A stream transformation which divides a stream of `In` events into substreams,
  * where each substream is associated with a `Context` value.
  *
  * A splitter must be combined with a Consumer via the `through` method.
  * The consumer will be run on each of the substreams created by this splitter,
  * generating a single value for each substream. The combination of a Splitter
  * and a Consumer/Parser yields a `Transformer`.
  *
  * For example, given a stream of symbols like
  * {{{ A A [ 1 2 3 ] B C [ 4 5 6 ] }}}
  * an example Splitter might use `[` and `]` as signals that a context is starting
  * or ending, respectively. So the substreams identified by that splitter would be
  *  - `[ 1 2 3 ]`
  *  - `[ 4 5 6 ]`
  *
  * The example splitter would need to be combined with a Consumer/Parser that understands
  * those substreams individually. For example, a Consumer that calculates the sum of
  * the numbers between the `[` and `]` would generate the following results for each
  * respective substream:
  *  - `6`
  *  - `15`
  *
  * Thus the combination of the example splitter and the summing consumer would yield
  * a transformer that turns the stream `A A [ 1 2 3 ] B C [ 4 5 6 ]` into the stream
  * `6 15`. That transformer will need to be attached to some downstream handler to
  * produce a meaningful value from the transformed stream, e.g. a `Consumer.toList`
  * could consume the `6 15` stream as a `List(6, 15)`.
  * @tparam In
  * @tparam Context
  */
trait Splitter[In, +Context] { self =>
	def makeHandler[Out](downstream: ContextSensitiveHandler[In, Context, Out]): Handler[In, Out]

	def as[P](implicit parser: Context => Parser[In, P]) = map(parser)

	@deprecated("Use .map instead", "0.6")
	def through[P](joiner: Context => Parser[In, P]): Transformer[In, P] = map(joiner)

	/** Combine this splitter with a "joiner" which obtains a parser
	  * for its substreams based on a Context value.
	  * If the consumer logic is independent of any Context value, you can pass
	  * a Parser directly instead of wrapping it as a function, since
	  * `Parser` extends `Any => Parser`.
	  *
	  * @param joiner The consumer logic for substreams generated by this Splitter
	  * @tparam P The result type returned by the consumer logic
	  * @return A Transformer that feeds inputs through this splitter to create
	  *         substreams, then feeds those substreams into the `joiner` to create
	  *         `Out` values that will be passed downstream.
	  */
	def map[P](joiner: Context => Parser[In, P]): Transformer[In, P] = new Transformer[In, P] {
		override def toString = s"$self.map($joiner)"
		def makeHandler[Out](downstream: Handler[P, Out]): Handler[In, Out] = {
			val middleman = new ContextConsumerMiddleman(joiner)
			val wrapDownstream: ContextSensitiveHandler[In, Context, Out] = new ContextMiddlemanHandler(middleman, downstream)
			self.makeHandler(wrapDownstream)
		}
	}

	def flatMap[P](joiner: Context => Transformer[In, P]): Transformer[In, P] = new Transformer[In, P] {
		override def toString = s"$self.throughT($joiner)"
		def makeHandler[Out](downstream: Handler[P, Out]) = {
			val middleman = new ContextTransformerMiddleman(joiner)
			val wrapDownstream = new ContextMiddlemanHandler(middleman, downstream)
			self.makeHandler(wrapDownstream)
		}
	}
}

/** Base implementation for Splitters that deal with a "stack-like" input type, e.g. XML or JSON.
  * As the stream goes through the splitter, a context stack is maintained, and passed into a
  * ContextMatcher. Substream boundaries are defined as the events that cause the stack to enter
  * and exit states that cause the `matcher` returns a value.
  *
  * @param matcher A function that decides whether the context stack represents a `Context` value
  * @param stackable A strategy for updating the context stack based on inputs
  * @tparam In The input type
  * @tparam StackElem The context stack type
  * @tparam Context The interpreted value returned by the `matcher` given a context stack
  */
class ContextStackSplitter[In, StackElem, +Context](
	matcher: ContextMatcher[StackElem, Context]
)(
	implicit stackable: OldStackable.Aux[In, StackElem]
) extends Splitter[In, Context] { self =>

	def makeHandler[Out](downstream: ContextSensitiveHandler[In, Context, Out]): Handler[In, Out] = {
		new ContextStackSplitterHandler(matcher, downstream)
	}
	override def toString = s"Splitter($matcher)"
}

object Splitter {

	/** Create a Splitter that treats consecutive matched values as substreams.
	  * For example, given a matcher like `{ case c if c.isLetter => c }`, a stream like
	  * {{{1 2 3 A B C 4 5 6 D 7 8 E F G H 9}}}
	  * could be treated as having three substreams, where each substream's "context value"
	  * is the first letter in that group (because context is always defined by the beginning
	  * of the substream).
	  *
	  *  - `A B C` with context `'A'` (between the 3 and 4)
	  *  - `D` with context `'D'` (between the 6 and 7)
	  *  - `E F G H` with context `'E'` (between the 8 and 9)
	  *
	  *
	  * @param matcher A function defining which inputs count as a "match"
	  * @tparam In
	  * @tparam Context
	  * @return
	  */
	def consecutiveMatches[In, Context](matcher: PartialFunction[In, Context]): Splitter[In, Context] = new Splitter[In, Context] {
		override def toString = s"Splitter.consecutiveMatches($matcher)"
		def makeHandler[Out](downstream: ContextSensitiveHandler[In, Context, Out]) = new ConsecutiveMatchSplitterHandler(matcher, downstream)
	}

	/** Create a Splitter that treats consecutive values matching the predicate `p` as
	  * substreams with no particular context value.
	  * For example, given a matcher like `i => i % 2 == 0`, a stream like
	  * {{{1 3 2 2 4 5 6 7 8 10 4 3 1}}}
	  * could be treated as having three substreams:
	  *
	  *  - `2 2 4`
	  *  - `6`
	  *  - `8 10 4`
	  *
	  * @param p
	  * @tparam In
	  * @return
	  */
	def consecutiveMatches[In](p: In => Boolean): Splitter[In, Any] = consecutiveMatches[In, Any] {
		case in if p(in) => ()
	}

	/** Create a splitter that starts a new substream every time the `matcher` matches.
	  * Any events passed through before the initial match will be discarded, but every event
	  * thereafter will be part of a substream. The context for a substream is based on the
	  * value returned by the `matcher` for the event that caused that match.
	  *
	  * For example, in a stream like `4 3 2 1 2 3 1 2 1 2 3 4`, if our matcher was `{ case 1 => "yay" }`,
	  * then we'd have a new substream with context "yay" every time a `1` came through:
	  *
	  *  - (new context: "yay") 1 2 3
	  *  - (new context: "yay") 1 2
	  *  - (new context: "yay") 1 2 3 4
	  *
	  * @param matcher A PartialFunction that can extract a context value from inputs
	  * @tparam In The input type
	  * @tparam Context The extracted context type
	  * @return A splitter that starts a new substream for every input where `matcher.isDefinedAt(input)`,
	  *         with a context equal to `matcher(input)`.
	  */
	def splitOnMatch[In, Context](matcher: PartialFunction[In, Context]): Splitter[In, Context] = new Splitter[In, Context] {
		override def toString = s"Splitter.splitOnMatch($matcher)"
		def makeHandler[Out](downstream: ContextSensitiveHandler[In, Context, Out]) = new SplitOnMatchHandler(matcher, downstream)
	}

	/** Create a splitter that starts a new substream every time the predicate function `p` returns true for an input.
	  * Any inputs passed through before the initial match will be discarded, but every event thereafter will be part
	  * of a substream. Context is ignored for substreams from this method - the context type is `Any`.
	  *
	  * For example, in a stream like `4 3 2 1 2 3 1 2 1 2 3 4`, if our predicate was `{ _ == 1 }`,
	  * then we'd have a new substream starting from each `1` input.
	  *
	  *  - (new context) 1 2 3
	  *  - (new context) 1 2
	  *  - (new context) 1 2 3 4
	  *
	  * @param p The predicate function responsible for determining if a new context should start for an input.
	  * @tparam In The input type
	  * @return A splitter that starts a new substream for every input where `p(input) == true`
	  */
	def splitOnMatch[In](p: In => Boolean): Splitter[In, Any] = splitOnMatch[In, Any] {
		case in if p(in) => ()
	}
}