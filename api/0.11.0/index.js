Index.PACKAGES = {"io.dylemma.spac.interop" : [], "io.dylemma.spac.json" : [{"name" : "io.dylemma.spac.json.Fs2DataSource", "shortDescription" : "Provides helpers for creating FS2 streams of io.dylemma.spac.json.JsonEvent,using fs2-data-json as the underlying event provider.", "object" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html", "members_object" : [{"label" : "convert", "tail" : "(callerPos: CallerPos): Pipe[F, Token, JsonEvent]", "member" : "io.dylemma.spac.json.Fs2DataSource.convert", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#convert[F[_]](implicitcallerPos:io.dylemma.spac.CallerPos):fs2.Pipe[F,fs2.data.json.Token,io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "fromString", "tail" : "(rawJson: String)(F: RaiseThrowable[F], callerPos: CallerPos): Stream[F, JsonEvent]", "member" : "io.dylemma.spac.json.Fs2DataSource.fromString", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#fromString[F[_]](rawJson:String)(implicitF:fs2.RaiseThrowable[F],implicitcallerPos:io.dylemma.spac.CallerPos):fs2.Stream[F,io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "fromRawJsonStream", "tail" : "(rawJsonStream: Stream[F, A])(A: CharLikeChunks[F, A], F: RaiseThrowable[F], callerPos: CallerPos): Stream[F, JsonEvent]", "member" : "io.dylemma.spac.json.Fs2DataSource.fromRawJsonStream", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#fromRawJsonStream[F[_],A](rawJsonStream:fs2.Stream[F,A])(implicitA:fs2.data.text.CharLikeChunks[F,A],implicitF:fs2.RaiseThrowable[F],implicitcallerPos:io.dylemma.spac.CallerPos):fs2.Stream[F,io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/Fs2DataSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.json.JacksonSource", "shortDescription" : "Provides helpers for creating fs2.Stream and Iterator instances of JsonEvent from various underlying event sources,using the Jackson library as the underlying event parser.", "object" : "io\/dylemma\/spac\/json\/JacksonSource$.html", "members_object" : [{"label" : "fromFile", "tail" : "(file: File, factory: JsonFactory): Source[JsonEvent]", "member" : "io.dylemma.spac.json.JacksonSource.fromFile", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#fromFile(file:java.io.File,factory:com.fasterxml.jackson.core.JsonFactory):io.dylemma.spac.Source[io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "fromInputStream", "tail" : "(stream: InputStream, factory: JsonFactory): Source[JsonEvent]", "member" : "io.dylemma.spac.json.JacksonSource.fromInputStream", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#fromInputStream(stream:java.io.InputStream,factory:com.fasterxml.jackson.core.JsonFactory):io.dylemma.spac.Source[io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(reader: Reader, factory: JsonFactory): Source[JsonEvent]", "member" : "io.dylemma.spac.json.JacksonSource.fromReader", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#fromReader(reader:java.io.Reader,factory:com.fasterxml.jackson.core.JsonFactory):io.dylemma.spac.Source[io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "fromString", "tail" : "(rawJson: String, factory: JsonFactory): Source[JsonEvent]", "member" : "io.dylemma.spac.json.JacksonSource.fromString", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#fromString(rawJson:String,factory:com.fasterxml.jackson.core.JsonFactory):io.dylemma.spac.Source[io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "apply", "tail" : "(jacksonParser: com.fasterxml.jackson.core.JsonParser): Source[JsonEvent]", "member" : "io.dylemma.spac.json.JacksonSource.apply", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#apply(jacksonParser:com.fasterxml.jackson.core.JsonParser):io.dylemma.spac.Source[io.dylemma.spac.json.JsonEvent]", "kind" : "def"}, {"label" : "defaultFactory", "tail" : ": JsonFactory", "member" : "io.dylemma.spac.json.JacksonSource.defaultFactory", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#defaultFactory:com.fasterxml.jackson.core.JsonFactory", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/JacksonSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.json.JsonEvent", "object" : "io\/dylemma\/spac\/json\/JsonEvent$.html", "members_object" : [{"label" : "showJsonEventAsRawJson", "tail" : ": Show[JsonEvent]", "member" : "io.dylemma.spac.json.JsonEvent.showJsonEventAsRawJson", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#showJsonEventAsRawJson:cats.Show[io.dylemma.spac.json.JsonEvent]", "kind" : "implicit val"}, {"label" : "JNull", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JNull", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JNull", "kind" : "object"}, {"label" : "JNull", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JNull", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JNullextendsJsonValueEvent", "kind" : "trait"}, {"label" : "JString", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JString", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JString", "kind" : "object"}, {"label" : "JString", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JString", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JStringextendsJsonValueEvent", "kind" : "trait"}, {"label" : "JDouble", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JDouble", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JDouble", "kind" : "object"}, {"label" : "JDouble", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JDouble", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JDoubleextendsJsonValueEvent", "kind" : "trait"}, {"label" : "JLong", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JLong", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JLong", "kind" : "object"}, {"label" : "JLong", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JLong", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JLongextendsJsonValueEvent", "kind" : "trait"}, {"label" : "JBool", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JBool", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JBool", "kind" : "object"}, {"label" : "JBool", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.JBool", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#JBoolextendsJsonValueEvent", "kind" : "trait"}, {"label" : "IndexEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.IndexEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#IndexEnd", "kind" : "object"}, {"label" : "IndexEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.IndexEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#IndexEndextendsJsonStackPop", "kind" : "trait"}, {"label" : "IndexStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.IndexStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#IndexStart", "kind" : "object"}, {"label" : "IndexStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.IndexStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#IndexStartextendsJsonStackElem", "kind" : "trait"}, {"label" : "ArrayEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ArrayEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ArrayEnd", "kind" : "object"}, {"label" : "ArrayEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ArrayEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ArrayEndextendsJsonStackPop", "kind" : "trait"}, {"label" : "ArrayStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ArrayStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ArrayStart", "kind" : "object"}, {"label" : "ArrayStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ArrayStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ArrayStartextendsJsonStackElem", "kind" : "trait"}, {"label" : "FieldEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.FieldEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#FieldEnd", "kind" : "object"}, {"label" : "FieldEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.FieldEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#FieldEndextendsJsonStackPop", "kind" : "trait"}, {"label" : "FieldStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.FieldStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#FieldStart", "kind" : "object"}, {"label" : "FieldStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.FieldStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#FieldStartextendsJsonStackElem", "kind" : "trait"}, {"label" : "ObjectEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ObjectEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ObjectEnd", "kind" : "object"}, {"label" : "ObjectEnd", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ObjectEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ObjectEndextendsJsonStackPop", "kind" : "trait"}, {"label" : "ObjectStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ObjectStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ObjectStart", "kind" : "object"}, {"label" : "ObjectStart", "tail" : "", "member" : "io.dylemma.spac.json.JsonEvent.ObjectStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ObjectStartextendsJsonStackElem", "kind" : "trait"}, {"label" : "jsonStackLike", "tail" : ": StackLike[JsonEvent, JsonStackElem]", "member" : "io.dylemma.spac.json.JsonEvent.jsonStackLike", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#jsonStackLike:io.dylemma.spac.StackLike[io.dylemma.spac.json.JsonEvent,io.dylemma.spac.json.JsonStackElem]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/json\/JsonEvent.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonEvent) => Boolean, msg: => Any): JsonEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonEvent) => Boolean): JsonEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonEvent, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonEvent, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asNull", "tail" : "(): Option[JNull]", "member" : "io.dylemma.spac.json.JsonEvent.asNull", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asNull:Option[io.dylemma.spac.json.JsonEvent.JNull]", "kind" : "def"}, {"label" : "asString", "tail" : "(): Option[JString]", "member" : "io.dylemma.spac.json.JsonEvent.asString", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asString:Option[io.dylemma.spac.json.JsonEvent.JString]", "kind" : "def"}, {"label" : "asDouble", "tail" : "(): Option[JDouble]", "member" : "io.dylemma.spac.json.JsonEvent.asDouble", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asDouble:Option[io.dylemma.spac.json.JsonEvent.JDouble]", "kind" : "def"}, {"label" : "asLong", "tail" : "(): Option[JLong]", "member" : "io.dylemma.spac.json.JsonEvent.asLong", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asLong:Option[io.dylemma.spac.json.JsonEvent.JLong]", "kind" : "def"}, {"label" : "asBool", "tail" : "(): Option[JBool]", "member" : "io.dylemma.spac.json.JsonEvent.asBool", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asBool:Option[io.dylemma.spac.json.JsonEvent.JBool]", "kind" : "def"}, {"label" : "asValueEvent", "tail" : "(): Option[JsonValueEvent]", "member" : "io.dylemma.spac.json.JsonEvent.asValueEvent", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asValueEvent:Option[io.dylemma.spac.json.JsonValueEvent]", "kind" : "def"}, {"label" : "asStackPop", "tail" : "(): Option[JsonStackPop]", "member" : "io.dylemma.spac.json.JsonEvent.asStackPop", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asStackPop:Option[io.dylemma.spac.json.JsonStackPop]", "kind" : "def"}, {"label" : "asStackPush", "tail" : "(): Option[JsonStackElem]", "member" : "io.dylemma.spac.json.JsonEvent.asStackPush", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asStackPush:Option[io.dylemma.spac.json.JsonStackElem]", "kind" : "def"}, {"label" : "asIndexEnd", "tail" : "(): Option[IndexEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asIndexEnd:Option[io.dylemma.spac.json.JsonEvent.IndexEnd]", "kind" : "def"}, {"label" : "asIndexStart", "tail" : "(): Option[IndexStart]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asIndexStart:Option[io.dylemma.spac.json.JsonEvent.IndexStart]", "kind" : "def"}, {"label" : "asFieldEnd", "tail" : "(): Option[FieldEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asFieldEnd:Option[io.dylemma.spac.json.JsonEvent.FieldEnd]", "kind" : "def"}, {"label" : "asFieldStart", "tail" : "(): Option[FieldStart]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asFieldStart:Option[io.dylemma.spac.json.JsonEvent.FieldStart]", "kind" : "def"}, {"label" : "isArrayEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#isArrayEnd:Boolean", "kind" : "def"}, {"label" : "isArrayStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#isArrayStart:Boolean", "kind" : "def"}, {"label" : "isObjectEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectEnd", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#isObjectEnd:Boolean", "kind" : "def"}, {"label" : "isObjectStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectStart", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#isObjectStart:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "showRawJson", "tail" : "(): String", "member" : "io.dylemma.spac.json.JsonEvent.showRawJson", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#showRawJson:String", "kind" : "abstract def"}, {"label" : "location", "tail" : "(): ContextLocation", "member" : "io.dylemma.spac.HasLocation.location", "link" : "io\/dylemma\/spac\/json\/JsonEvent.html#location:io.dylemma.spac.ContextLocation", "kind" : "abstract def"}], "shortDescription" : "ADT for tokens in a JSON stream."}, {"name" : "io.dylemma.spac.json.JsonParserApplyOps", "shortDescription" : "Provides JSON-specific Parser constructor methods to the JsonParser object, for example JsonParser.fieldOf.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonParserApplyOps) => Boolean, msg: => Any): JsonParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonParserApplyOps) => Boolean): JsonParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonParserApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonParserApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "objectOfNullable", "tail" : "(parser: JsonParser[T])(arg0: TypeName[T], callerPos: CallerPos): JsonParser[Map[String, T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.objectOfNullable", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#objectOfNullable[T](parser:io.dylemma.spac.json.package.JsonParser[T])(implicitevidence$15:org.tpolecat.typename.TypeName[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[Map[String,T]]", "kind" : "def"}, {"label" : "objectOfNullable", "tail" : "(arg0: TypeName[T], arg1: JsonParser[T], callerPos: CallerPos): JsonParser[Map[String, T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.objectOfNullable", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#objectOfNullable[T](implicitevidence$13:org.tpolecat.typename.TypeName[T],implicitevidence$14:io.dylemma.spac.json.package.JsonParser[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[Map[String,T]]", "kind" : "def"}, {"label" : "objectOf", "tail" : "(parser: JsonParser[T])(arg0: TypeName[T], callerPos: CallerPos): JsonParser[Map[String, T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.objectOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#objectOf[T](parser:io.dylemma.spac.json.package.JsonParser[T])(implicitevidence$12:org.tpolecat.typename.TypeName[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[Map[String,T]]", "kind" : "def"}, {"label" : "objectOf", "tail" : "(arg0: TypeName[T], arg1: JsonParser[T], callerPos: CallerPos): JsonParser[Map[String, T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.objectOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#objectOf[T](implicitevidence$10:org.tpolecat.typename.TypeName[T],implicitevidence$11:io.dylemma.spac.json.package.JsonParser[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[Map[String,T]]", "kind" : "def"}, {"label" : "listOf", "tail" : "(parser: JsonParser[T])(arg0: TypeName[T], callerPos: CallerPos): JsonParser[List[T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.listOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#listOf[T](parser:io.dylemma.spac.json.package.JsonParser[T])(implicitevidence$9:org.tpolecat.typename.TypeName[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[List[T]]", "kind" : "def"}, {"label" : "listOf", "tail" : "(arg0: TypeName[T], arg1: JsonParser[T], callerPos: CallerPos): JsonParser[List[T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.listOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#listOf[T](implicitevidence$7:org.tpolecat.typename.TypeName[T],implicitevidence$8:io.dylemma.spac.json.package.JsonParser[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[List[T]]", "kind" : "def"}, {"label" : "nullableFieldOf", "tail" : "(fieldName: String, parser: JsonParser[T])(arg0: TypeName[T], callerPos: CallerPos): JsonParser[Option[T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.nullableFieldOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#nullableFieldOf[T](fieldName:String,parser:io.dylemma.spac.json.package.JsonParser[T])(implicitevidence$6:org.tpolecat.typename.TypeName[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[Option[T]]", "kind" : "def"}, {"label" : "nullableFieldOf", "tail" : "(fieldName: String)(arg0: TypeName[T], arg1: JsonParser[T], callerPos: CallerPos): JsonParser[Option[T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.nullableFieldOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#nullableFieldOf[T](fieldName:String)(implicitevidence$4:org.tpolecat.typename.TypeName[T],implicitevidence$5:io.dylemma.spac.json.package.JsonParser[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[Option[T]]", "kind" : "def"}, {"label" : "fieldOf", "tail" : "(fieldName: String, parser: JsonParser[T])(arg0: TypeName[T], callerPos: CallerPos): JsonParser[T]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.fieldOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#fieldOf[T](fieldName:String,parser:io.dylemma.spac.json.package.JsonParser[T])(implicitevidence$3:org.tpolecat.typename.TypeName[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[T]", "kind" : "def"}, {"label" : "fieldOf", "tail" : "(fieldName: String)(arg0: TypeName[T], arg1: JsonParser[T], callerPos: CallerPos): JsonParser[T]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.fieldOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#fieldOf[T](fieldName:String)(implicitevidence$1:org.tpolecat.typename.TypeName[T],implicitevidence$2:io.dylemma.spac.json.package.JsonParser[T],implicitcallerPos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonParser[T]", "kind" : "def"}, {"label" : "forNull", "tail" : "(): JsonParser[None.type]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forNull", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forNull:io.dylemma.spac.json.package.JsonParser[None.type]", "kind" : "def"}, {"label" : "forBoolean", "tail" : "(): JsonParser[Boolean]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forBoolean", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forBoolean:io.dylemma.spac.json.package.JsonParser[Boolean]", "kind" : "def"}, {"label" : "forDouble", "tail" : "(): JsonParser[Double]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forDouble", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forDouble:io.dylemma.spac.json.package.JsonParser[Double]", "kind" : "def"}, {"label" : "forFloat", "tail" : "(): JsonParser[Float]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forFloat", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forFloat:io.dylemma.spac.json.package.JsonParser[Float]", "kind" : "def"}, {"label" : "forLong", "tail" : "(): JsonParser[Long]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forLong", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forLong:io.dylemma.spac.json.package.JsonParser[Long]", "kind" : "def"}, {"label" : "forInt", "tail" : "(): JsonParser[Int]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forInt", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forInt:io.dylemma.spac.json.package.JsonParser[Int]", "kind" : "def"}, {"label" : "forString", "tail" : "(): JsonParser[String]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forString", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forString:io.dylemma.spac.json.package.JsonParser[String]", "kind" : "def"}, {"label" : "nullable", "tail" : "(parser: JsonParser[T]): JsonParser[Option[T]]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.nullable", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#nullable[T](implicitparser:io.dylemma.spac.json.package.JsonParser[T]):io.dylemma.spac.json.package.JsonParser[Option[T]]", "kind" : "def"}, {"label" : "forPrimitive", "tail" : "(describePrimitive: String, matchPrimitive: (JsonEvent) => Option[A]): JsonParser[A]", "member" : "io.dylemma.spac.json.JsonParserApplyOps.forPrimitive", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#forPrimitive[A](describePrimitive:String,matchPrimitive:io.dylemma.spac.json.JsonEvent=>Option[A]):io.dylemma.spac.json.package.JsonParser[A]", "kind" : "def"}, {"member" : "io.dylemma.spac.json.JsonParserApplyOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/json\/package$$JsonParserApplyOps.html", "kind" : "class"}, {"name" : "io.dylemma.spac.json.JsonSplitterApplyOps", "shortDescription" : "Adds Splitter.json, for constructing json context matcher-based JsonSplitters", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonSplitterApplyOps) => Boolean, msg: => Any): JsonSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonSplitterApplyOps) => Boolean): JsonSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonSplitterApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonSplitterApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "json", "tail" : "(matcher: ContextMatcher[JsonStackElem, C])(pos: CallerPos): JsonSplitter[C]", "member" : "io.dylemma.spac.json.JsonSplitterApplyOps.json", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#json[C](matcher:io.dylemma.spac.ContextMatcher[io.dylemma.spac.json.JsonStackElem,C])(implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.json.package.JsonSplitter[C]", "kind" : "def"}, {"member" : "io.dylemma.spac.json.JsonSplitterApplyOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/json\/package$$JsonSplitterApplyOps.html", "kind" : "class"}, {"name" : "io.dylemma.spac.json.JsonSplitterOps", "shortDescription" : "Adds splitter.asNullable[A], for handling possibly-null values in a JSON substream", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonSplitterOps[C]) => Boolean, msg: => Any): JsonSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonSplitterOps[C]) => Boolean): JsonSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonSplitterOps[C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonSplitterOps[C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asNullable", "tail" : "(arg0: JsonParser[A]): JsonTransformer[Option[A]]", "member" : "io.dylemma.spac.json.JsonSplitterOps.asNullable", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#asNullable[A](implicitevidence$16:io.dylemma.spac.json.package.JsonParser[A]):io.dylemma.spac.json.package.JsonTransformer[Option[A]]", "kind" : "def"}, {"member" : "io.dylemma.spac.json.JsonSplitterOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/json\/package$$JsonSplitterOps.html", "kind" : "class"}, {"name" : "io.dylemma.spac.json.JsonStackElem", "trait" : "io\/dylemma\/spac\/json\/JsonStackElem.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonStackElem) => Boolean, msg: => Any): JsonStackElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonStackElem) => Boolean): JsonStackElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonStackElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonStackElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonStackElem, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonStackElem, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asStackPush", "tail" : "(): Some[JsonStackElem]", "member" : "io.dylemma.spac.json.JsonStackElem.asStackPush", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asStackPush:Some[io.dylemma.spac.json.JsonStackElem]", "kind" : "def"}, {"label" : "asNull", "tail" : "(): Option[JNull]", "member" : "io.dylemma.spac.json.JsonEvent.asNull", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asNull:Option[io.dylemma.spac.json.JsonEvent.JNull]", "kind" : "def"}, {"label" : "asString", "tail" : "(): Option[JString]", "member" : "io.dylemma.spac.json.JsonEvent.asString", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asString:Option[io.dylemma.spac.json.JsonEvent.JString]", "kind" : "def"}, {"label" : "asDouble", "tail" : "(): Option[JDouble]", "member" : "io.dylemma.spac.json.JsonEvent.asDouble", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asDouble:Option[io.dylemma.spac.json.JsonEvent.JDouble]", "kind" : "def"}, {"label" : "asLong", "tail" : "(): Option[JLong]", "member" : "io.dylemma.spac.json.JsonEvent.asLong", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asLong:Option[io.dylemma.spac.json.JsonEvent.JLong]", "kind" : "def"}, {"label" : "asBool", "tail" : "(): Option[JBool]", "member" : "io.dylemma.spac.json.JsonEvent.asBool", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asBool:Option[io.dylemma.spac.json.JsonEvent.JBool]", "kind" : "def"}, {"label" : "asValueEvent", "tail" : "(): Option[JsonValueEvent]", "member" : "io.dylemma.spac.json.JsonEvent.asValueEvent", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asValueEvent:Option[io.dylemma.spac.json.JsonValueEvent]", "kind" : "def"}, {"label" : "asStackPop", "tail" : "(): Option[JsonStackPop]", "member" : "io.dylemma.spac.json.JsonEvent.asStackPop", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asStackPop:Option[io.dylemma.spac.json.JsonStackPop]", "kind" : "def"}, {"label" : "asIndexEnd", "tail" : "(): Option[IndexEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asIndexEnd:Option[io.dylemma.spac.json.JsonEvent.IndexEnd]", "kind" : "def"}, {"label" : "asIndexStart", "tail" : "(): Option[IndexStart]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexStart", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asIndexStart:Option[io.dylemma.spac.json.JsonEvent.IndexStart]", "kind" : "def"}, {"label" : "asFieldEnd", "tail" : "(): Option[FieldEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asFieldEnd:Option[io.dylemma.spac.json.JsonEvent.FieldEnd]", "kind" : "def"}, {"label" : "asFieldStart", "tail" : "(): Option[FieldStart]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldStart", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asFieldStart:Option[io.dylemma.spac.json.JsonEvent.FieldStart]", "kind" : "def"}, {"label" : "isArrayEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#isArrayEnd:Boolean", "kind" : "def"}, {"label" : "isArrayStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayStart", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#isArrayStart:Boolean", "kind" : "def"}, {"label" : "isObjectEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#isObjectEnd:Boolean", "kind" : "def"}, {"label" : "isObjectStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectStart", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#isObjectStart:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "showRawJson", "tail" : "(): String", "member" : "io.dylemma.spac.json.JsonEvent.showRawJson", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#showRawJson:String", "kind" : "abstract def"}, {"label" : "location", "tail" : "(): ContextLocation", "member" : "io.dylemma.spac.HasLocation.location", "link" : "io\/dylemma\/spac\/json\/JsonStackElem.html#location:io.dylemma.spac.ContextLocation", "kind" : "abstract def"}], "shortDescription" : "Subset of JsonEvents that constitute a \"context stack push\"."}, {"name" : "io.dylemma.spac.json.JsonStackPop", "trait" : "io\/dylemma\/spac\/json\/JsonStackPop.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonStackPop) => Boolean, msg: => Any): JsonStackPop", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonStackPop) => Boolean): JsonStackPop", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonStackPop", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonStackPop", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonStackPop, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonStackPop, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asStackPop", "tail" : "(): Some[JsonStackPop]", "member" : "io.dylemma.spac.json.JsonStackPop.asStackPop", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asStackPop:Some[io.dylemma.spac.json.JsonStackPop]", "kind" : "def"}, {"label" : "asNull", "tail" : "(): Option[JNull]", "member" : "io.dylemma.spac.json.JsonEvent.asNull", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asNull:Option[io.dylemma.spac.json.JsonEvent.JNull]", "kind" : "def"}, {"label" : "asString", "tail" : "(): Option[JString]", "member" : "io.dylemma.spac.json.JsonEvent.asString", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asString:Option[io.dylemma.spac.json.JsonEvent.JString]", "kind" : "def"}, {"label" : "asDouble", "tail" : "(): Option[JDouble]", "member" : "io.dylemma.spac.json.JsonEvent.asDouble", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asDouble:Option[io.dylemma.spac.json.JsonEvent.JDouble]", "kind" : "def"}, {"label" : "asLong", "tail" : "(): Option[JLong]", "member" : "io.dylemma.spac.json.JsonEvent.asLong", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asLong:Option[io.dylemma.spac.json.JsonEvent.JLong]", "kind" : "def"}, {"label" : "asBool", "tail" : "(): Option[JBool]", "member" : "io.dylemma.spac.json.JsonEvent.asBool", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asBool:Option[io.dylemma.spac.json.JsonEvent.JBool]", "kind" : "def"}, {"label" : "asValueEvent", "tail" : "(): Option[JsonValueEvent]", "member" : "io.dylemma.spac.json.JsonEvent.asValueEvent", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asValueEvent:Option[io.dylemma.spac.json.JsonValueEvent]", "kind" : "def"}, {"label" : "asStackPush", "tail" : "(): Option[JsonStackElem]", "member" : "io.dylemma.spac.json.JsonEvent.asStackPush", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asStackPush:Option[io.dylemma.spac.json.JsonStackElem]", "kind" : "def"}, {"label" : "asIndexEnd", "tail" : "(): Option[IndexEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asIndexEnd:Option[io.dylemma.spac.json.JsonEvent.IndexEnd]", "kind" : "def"}, {"label" : "asIndexStart", "tail" : "(): Option[IndexStart]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexStart", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asIndexStart:Option[io.dylemma.spac.json.JsonEvent.IndexStart]", "kind" : "def"}, {"label" : "asFieldEnd", "tail" : "(): Option[FieldEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asFieldEnd:Option[io.dylemma.spac.json.JsonEvent.FieldEnd]", "kind" : "def"}, {"label" : "asFieldStart", "tail" : "(): Option[FieldStart]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldStart", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asFieldStart:Option[io.dylemma.spac.json.JsonEvent.FieldStart]", "kind" : "def"}, {"label" : "isArrayEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#isArrayEnd:Boolean", "kind" : "def"}, {"label" : "isArrayStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayStart", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#isArrayStart:Boolean", "kind" : "def"}, {"label" : "isObjectEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectEnd", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#isObjectEnd:Boolean", "kind" : "def"}, {"label" : "isObjectStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectStart", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#isObjectStart:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "showRawJson", "tail" : "(): String", "member" : "io.dylemma.spac.json.JsonEvent.showRawJson", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#showRawJson:String", "kind" : "abstract def"}, {"label" : "location", "tail" : "(): ContextLocation", "member" : "io.dylemma.spac.HasLocation.location", "link" : "io\/dylemma\/spac\/json\/JsonStackPop.html#location:io.dylemma.spac.ContextLocation", "kind" : "abstract def"}], "shortDescription" : "Subset of JsonEvents that constitute a \"context stack pop\"."}, {"name" : "io.dylemma.spac.json.JsonValueEvent", "trait" : "io\/dylemma\/spac\/json\/JsonValueEvent.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonValueEvent) => Boolean, msg: => Any): JsonValueEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonValueEvent) => Boolean): JsonValueEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): JsonValueEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonValueEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonValueEvent, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonValueEvent, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asValueEvent", "tail" : "(): Some[JsonValueEvent]", "member" : "io.dylemma.spac.json.JsonValueEvent.asValueEvent", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asValueEvent:Some[io.dylemma.spac.json.JsonValueEvent]", "kind" : "def"}, {"label" : "asNull", "tail" : "(): Option[JNull]", "member" : "io.dylemma.spac.json.JsonEvent.asNull", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asNull:Option[io.dylemma.spac.json.JsonEvent.JNull]", "kind" : "def"}, {"label" : "asString", "tail" : "(): Option[JString]", "member" : "io.dylemma.spac.json.JsonEvent.asString", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asString:Option[io.dylemma.spac.json.JsonEvent.JString]", "kind" : "def"}, {"label" : "asDouble", "tail" : "(): Option[JDouble]", "member" : "io.dylemma.spac.json.JsonEvent.asDouble", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asDouble:Option[io.dylemma.spac.json.JsonEvent.JDouble]", "kind" : "def"}, {"label" : "asLong", "tail" : "(): Option[JLong]", "member" : "io.dylemma.spac.json.JsonEvent.asLong", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asLong:Option[io.dylemma.spac.json.JsonEvent.JLong]", "kind" : "def"}, {"label" : "asBool", "tail" : "(): Option[JBool]", "member" : "io.dylemma.spac.json.JsonEvent.asBool", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asBool:Option[io.dylemma.spac.json.JsonEvent.JBool]", "kind" : "def"}, {"label" : "asStackPop", "tail" : "(): Option[JsonStackPop]", "member" : "io.dylemma.spac.json.JsonEvent.asStackPop", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asStackPop:Option[io.dylemma.spac.json.JsonStackPop]", "kind" : "def"}, {"label" : "asStackPush", "tail" : "(): Option[JsonStackElem]", "member" : "io.dylemma.spac.json.JsonEvent.asStackPush", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asStackPush:Option[io.dylemma.spac.json.JsonStackElem]", "kind" : "def"}, {"label" : "asIndexEnd", "tail" : "(): Option[IndexEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexEnd", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asIndexEnd:Option[io.dylemma.spac.json.JsonEvent.IndexEnd]", "kind" : "def"}, {"label" : "asIndexStart", "tail" : "(): Option[IndexStart]", "member" : "io.dylemma.spac.json.JsonEvent.asIndexStart", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asIndexStart:Option[io.dylemma.spac.json.JsonEvent.IndexStart]", "kind" : "def"}, {"label" : "asFieldEnd", "tail" : "(): Option[FieldEnd]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldEnd", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asFieldEnd:Option[io.dylemma.spac.json.JsonEvent.FieldEnd]", "kind" : "def"}, {"label" : "asFieldStart", "tail" : "(): Option[FieldStart]", "member" : "io.dylemma.spac.json.JsonEvent.asFieldStart", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asFieldStart:Option[io.dylemma.spac.json.JsonEvent.FieldStart]", "kind" : "def"}, {"label" : "isArrayEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayEnd", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#isArrayEnd:Boolean", "kind" : "def"}, {"label" : "isArrayStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isArrayStart", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#isArrayStart:Boolean", "kind" : "def"}, {"label" : "isObjectEnd", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectEnd", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#isObjectEnd:Boolean", "kind" : "def"}, {"label" : "isObjectStart", "tail" : "(): Boolean", "member" : "io.dylemma.spac.json.JsonEvent.isObjectStart", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#isObjectStart:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "valueAsString", "tail" : "(): String", "member" : "io.dylemma.spac.json.JsonValueEvent.valueAsString", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#valueAsString:String", "kind" : "abstract def"}, {"label" : "showRawJson", "tail" : "(): String", "member" : "io.dylemma.spac.json.JsonEvent.showRawJson", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#showRawJson:String", "kind" : "abstract def"}, {"label" : "location", "tail" : "(): ContextLocation", "member" : "io.dylemma.spac.HasLocation.location", "link" : "io\/dylemma\/spac\/json\/JsonValueEvent.html#location:io.dylemma.spac.ContextLocation", "kind" : "abstract def"}], "shortDescription" : "Subset of JsonEvents that represent a primitive values"}], "io" : [], "io.dylemma" : [], "io.dylemma.spac.xml" : [{"name" : "io.dylemma.spac.xml.AsQName", "object" : "io\/dylemma\/spac\/xml\/AsQName$.html", "members_object" : [{"label" : "stringAsQNameIgnoringNamespace", "tail" : ": AsQName[String]", "member" : "io.dylemma.spac.xml.AsQName.stringAsQNameIgnoringNamespace", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#stringAsQNameIgnoringNamespace:io.dylemma.spac.xml.AsQName[String]", "kind" : "implicit val"}, {"label" : "show", "tail" : "(n: N)(arg0: AsQName[N]): String", "member" : "io.dylemma.spac.xml.AsQName.show", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#show[N](n:N)(implicitevidence$3:io.dylemma.spac.xml.AsQName[N]):String", "kind" : "def"}, {"label" : "apply", "tail" : "(instance: AsQName[N]): AsQName[N]", "member" : "io.dylemma.spac.xml.AsQName.apply", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#apply[N](implicitinstance:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.xml.AsQName[N]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/AsQName$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/xml\/AsQName.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsQName[N]) => Boolean, msg: => Any): AsQName[N]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsQName[N]) => Boolean): AsQName[N]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AsQName[N]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsQName[N]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsQName[N], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsQName[N], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Unit) => Boolean): SingleItemContextMatcher[ElemStart, Unit]", "member" : "io.dylemma.spac.xml.elem.filter", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#filter(p:A=>Boolean):io.dylemma.spac.SingleItemContextMatcher[Item,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Unit) => Option[B]): SingleItemContextMatcher[ElemStart, B]", "member" : "io.dylemma.spac.xml.elem.flatMap", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#flatMap[B](f:A=>Option[B]):io.dylemma.spac.SingleItemContextMatcher[Item,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Unit) => B): SingleItemContextMatcher[ElemStart, B]", "member" : "io.dylemma.spac.xml.elem.map", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#map[B](f:A=>B):io.dylemma.spac.SingleItemContextMatcher[Item,B]", "kind" : "def"}, {"label" : "applyChained", "tail" : "(stack: IndexedSeq[ElemStart], offset: Int, avail: Int, next: ContextMatcher[ElemStart, B]): Option[(Unit, B)]", "member" : "io.dylemma.spac.xml.elem.applyChained", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#applyChained[B](stack:scala.collection.IndexedSeq[Item],offset:Int,avail:Int,next:io.dylemma.spac.ContextMatcher[Item,B]):Option[(A,B)]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "apply", "tail" : "(stack: IndexedSeq[ElemStart], offset: Int, avail: Int): Option[Unit]", "member" : "io.dylemma.spac.xml.elem.apply", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#apply(stack:scala.collection.IndexedSeq[Elem],offset:Int,avail:Int):Option[A]", "kind" : "def"}, {"label" : "applyElem", "tail" : "(elem: ElemStart): Option[Unit]", "member" : "io.dylemma.spac.xml.elem.applyElem", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#applyElem(elem:Item):Option[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/AsQName.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "equals", "tail" : "(l: N, r: N2)(arg0: AsQName[N2]): Boolean", "member" : "io.dylemma.spac.xml.AsQName.equals", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#equals[N2](l:N,r:N2)(implicitevidence$2:io.dylemma.spac.xml.AsQName[N2]):Boolean", "kind" : "abstract def"}, {"label" : "convert", "tail" : "(from: N2)(arg0: AsQName[N2]): N", "member" : "io.dylemma.spac.xml.AsQName.convert", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#convert[N2](from:N2)(implicitevidence$1:io.dylemma.spac.xml.AsQName[N2]):N", "kind" : "abstract def"}, {"label" : "namespaceUri", "tail" : "(n: N): Option[String]", "member" : "io.dylemma.spac.xml.AsQName.namespaceUri", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#namespaceUri(n:N):Option[String]", "kind" : "abstract def"}, {"label" : "name", "tail" : "(n: N): String", "member" : "io.dylemma.spac.xml.AsQName.name", "link" : "io\/dylemma\/spac\/xml\/AsQName.html#name(n:N):String", "kind" : "abstract def"}], "shortDescription" : "Adapter for various representations of QName"}, {"name" : "io.dylemma.spac.xml.Fs2DataQName", "shortDescription" : "", "object" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html", "members_object" : [{"label" : "fs2DataQNameAsQName", "tail" : ": AsQName[QName]", "member" : "io.dylemma.spac.xml.Fs2DataQName.fs2DataQNameAsQName", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#fs2DataQNameAsQName:io.dylemma.spac.xml.AsQName[fs2.data.xml.QName]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/Fs2DataQName$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.xml.Fs2DataSource", "shortDescription" : "Provides helpers for creating FS2 streams of io.dylemma.spac.xml.XmlEvent,using fs2-data-xml as the underlying event provider.", "object" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html", "members_object" : [{"label" : "NoCleanup", "tail" : "", "member" : "io.dylemma.spac.xml.Fs2DataSource.NoCleanup", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#NoCleanup", "kind" : "object"}, {"label" : "Cleanup", "tail" : "", "member" : "io.dylemma.spac.xml.Fs2DataSource.Cleanup", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#Cleanup", "kind" : "object"}, {"label" : "Cleanup", "tail" : "", "member" : "io.dylemma.spac.xml.Fs2DataSource.Cleanup", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#CleanupextendsAnyRef", "kind" : "trait"}, {"label" : "convert", "tail" : "(): Pipe[F, fs2.data.xml.XmlEvent, XmlEvent]", "member" : "io.dylemma.spac.xml.Fs2DataSource.convert", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#convert[F[_]]:fs2.Pipe[F,fs2.data.xml.XmlEvent,io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromString", "tail" : "(rawXml: String, cleanup: Cleanup)(F: MonadError[F, Throwable]): Stream[F, XmlEvent]", "member" : "io.dylemma.spac.xml.Fs2DataSource.fromString", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#fromString[F[_]](rawXml:String,cleanup:io.dylemma.spac.xml.Fs2DataSource.Cleanup)(implicitF:cats.MonadError[F,Throwable]):fs2.Stream[F,io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromRawXmlStream", "tail" : "(rawXmlStream: Stream[F, A], cleanup: Cleanup)(A: CharLikeChunks[F, A], F: MonadError[F, Throwable]): Stream[F, XmlEvent]", "member" : "io.dylemma.spac.xml.Fs2DataSource.fromRawXmlStream", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#fromRawXmlStream[F[_],A](rawXmlStream:fs2.Stream[F,A],cleanup:io.dylemma.spac.xml.Fs2DataSource.Cleanup)(implicitA:fs2.data.text.CharLikeChunks[F,A],implicitF:cats.MonadError[F,Throwable]):fs2.Stream[F,io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/Fs2DataSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.xml.JavaxQName", "shortDescription" : "", "object" : "io\/dylemma\/spac\/xml\/JavaxQName$.html", "members_object" : [{"label" : "javaxQNameAsQName", "tail" : ": AsQName[QName]", "member" : "io.dylemma.spac.xml.JavaxQName.javaxQNameAsQName", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#javaxQNameAsQName:io.dylemma.spac.xml.AsQName[javax.xml.namespace.QName]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/JavaxQName$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.xml.JavaxSource", "shortDescription" : "Provides helpers for creating Source[XmlEvent] using javax.xml.streamfor the underlying event provider.", "object" : "io\/dylemma\/spac\/xml\/JavaxSource$.html", "members_object" : [{"label" : "apply", "tail" : "(eventReader: XMLEventReader): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.apply", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#apply(eventReader:javax.xml.stream.XMLEventReader):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromString", "tail" : "(rawXml: String, factory: XMLInputFactory): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.fromString", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#fromString(rawXml:String,factory:javax.xml.stream.XMLInputFactory):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromFileWithCharset", "tail" : "(file: File, charset: String, factory: XMLInputFactory): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.fromFileWithCharset", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#fromFileWithCharset(file:java.io.File,charset:String,factory:javax.xml.stream.XMLInputFactory):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromFile", "tail" : "(file: File, factory: XMLInputFactory): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.fromFile", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#fromFile(file:java.io.File,factory:javax.xml.stream.XMLInputFactory):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(rawXml: Reader, factory: XMLInputFactory): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.fromReader", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#fromReader(rawXml:java.io.Reader,factory:javax.xml.stream.XMLInputFactory):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromInputStreamWithCharset", "tail" : "(rawXml: InputStream, charset: String, factory: XMLInputFactory): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.fromInputStreamWithCharset", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#fromInputStreamWithCharset(rawXml:java.io.InputStream,charset:String,factory:javax.xml.stream.XMLInputFactory):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "fromInputStream", "tail" : "(rawXml: InputStream, factory: XMLInputFactory): Source[XmlEvent]", "member" : "io.dylemma.spac.xml.JavaxSource.fromInputStream", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#fromInputStream(rawXml:java.io.InputStream,factory:javax.xml.stream.XMLInputFactory):io.dylemma.spac.Source[io.dylemma.spac.xml.XmlEvent]", "kind" : "def"}, {"label" : "defaultFactory", "tail" : ": XMLInputFactory", "member" : "io.dylemma.spac.xml.JavaxSource.defaultFactory", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#defaultFactory:javax.xml.stream.XMLInputFactory", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/JavaxSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.xml.XmlEvent", "object" : "io\/dylemma\/spac\/xml\/XmlEvent$.html", "members_object" : [{"label" : "xmlEventStackable", "tail" : ": StackLike[XmlEvent, ElemStart]", "member" : "io.dylemma.spac.xml.XmlEvent.xmlEventStackable", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#xmlEventStackable:io.dylemma.spac.StackLike[io.dylemma.spac.xml.XmlEvent,io.dylemma.spac.xml.XmlEvent.ElemStart]", "kind" : "implicit val"}, {"label" : "showDebugXmlEvent", "tail" : ": Show[XmlEvent]", "member" : "io.dylemma.spac.xml.XmlEvent.showDebugXmlEvent", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#showDebugXmlEvent:cats.Show[io.dylemma.spac.xml.XmlEvent]", "kind" : "implicit val"}, {"label" : "ShowableQName", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.ShowableQName", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ShowableQName", "kind" : "object"}, {"label" : "ShowableQName", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.ShowableQName", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ShowableQNameextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Text", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.Text", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#TextextendsXmlEvent", "kind" : "trait"}, {"label" : "Text", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.Text", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#Text", "kind" : "object"}, {"label" : "ElemEnd", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.ElemEnd", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ElemEndextendsXmlEvent", "kind" : "trait"}, {"label" : "ElemEnd", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.ElemEnd", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ElemEnd", "kind" : "object"}, {"label" : "ElemStart", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.ElemStart", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ElemStartextendsXmlEvent", "kind" : "trait"}, {"label" : "ElemStart", "tail" : "", "member" : "io.dylemma.spac.xml.XmlEvent.ElemStart", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ElemStart", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/xml\/XmlEvent.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlEvent) => Boolean, msg: => Any): XmlEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlEvent) => Boolean): XmlEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): XmlEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): XmlEvent", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (XmlEvent, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (XmlEvent, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asText", "tail" : "(): Option[Text]", "member" : "io.dylemma.spac.xml.XmlEvent.asText", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#asText:Option[io.dylemma.spac.xml.XmlEvent.Text]", "kind" : "def"}, {"label" : "asElemEnd", "tail" : "(): Option[ElemEnd]", "member" : "io.dylemma.spac.xml.XmlEvent.asElemEnd", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#asElemEnd:Option[io.dylemma.spac.xml.XmlEvent.ElemEnd]", "kind" : "def"}, {"label" : "asElemStart", "tail" : "(): Option[ElemStart]", "member" : "io.dylemma.spac.xml.XmlEvent.asElemStart", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#asElemStart:Option[io.dylemma.spac.xml.XmlEvent.ElemStart]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "location", "tail" : "(): ContextLocation", "member" : "io.dylemma.spac.HasLocation.location", "link" : "io\/dylemma\/spac\/xml\/XmlEvent.html#location:io.dylemma.spac.ContextLocation", "kind" : "abstract def"}], "shortDescription" : "Spac's internal representation of XML \"events\"."}, {"name" : "io.dylemma.spac.xml.XmlParserApplyOps", "shortDescription" : "XML-specific Parser constructor methods, for example XmlParser.attr and XmlParser.text", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlParserApplyOps) => Boolean, msg: => Any): XmlParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlParserApplyOps) => Boolean): XmlParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): XmlParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): XmlParserApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (XmlParserApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (XmlParserApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "attrOpt", "tail" : "(attributeName: N)(arg0: AsQName[N]): XmlParser[Option[String]]", "member" : "io.dylemma.spac.xml.XmlParserApplyOps.attrOpt", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#attrOpt[N](attributeName:N)(implicitevidence$4:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.xml.package.XmlParser[Option[String]]", "kind" : "def"}, {"label" : "attr", "tail" : "(attributeName: N)(arg0: AsQName[N]): XmlParser[String]", "member" : "io.dylemma.spac.xml.XmlParserApplyOps.attr", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#attr[N](attributeName:N)(implicitevidence$3:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.xml.package.XmlParser[String]", "kind" : "def"}, {"label" : "forOptionalAttribute", "tail" : "(attributeName: N)(arg0: AsQName[N]): Parser[XmlEvent, Option[String]]", "member" : "io.dylemma.spac.xml.XmlParserApplyOps.forOptionalAttribute", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#forOptionalAttribute[N](attributeName:N)(implicitevidence$2:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.Parser[io.dylemma.spac.xml.XmlEvent,Option[String]]", "kind" : "def"}, {"label" : "forMandatoryAttribute", "tail" : "(attributeName: N)(arg0: AsQName[N]): Parser[XmlEvent, String]", "member" : "io.dylemma.spac.xml.XmlParserApplyOps.forMandatoryAttribute", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#forMandatoryAttribute[N](attributeName:N)(implicitevidence$1:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.Parser[io.dylemma.spac.xml.XmlEvent,String]", "kind" : "def"}, {"label" : "forText", "tail" : "(): Parser[XmlEvent, String]", "member" : "io.dylemma.spac.xml.XmlParserApplyOps.forText", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#forText:io.dylemma.spac.Parser[io.dylemma.spac.xml.XmlEvent,String]", "kind" : "def"}, {"member" : "io.dylemma.spac.xml.XmlParserApplyOps#<init>", "error" : "unsupported entity"}, {"label" : "parserApply", "tail" : ": ParserApplyWithBoundInput[XmlEvent]", "member" : "io.dylemma.spac.xml.XmlParserApplyOps.parserApply", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#parserApply:io.dylemma.spac.ParserApplyWithBoundInput[io.dylemma.spac.xml.XmlEvent]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/xml\/package$$XmlParserApplyOps.html", "kind" : "class"}, {"name" : "io.dylemma.spac.xml.XmlSpacException", "object" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html", "members_object" : [{"label" : "MissingMandatoryAttributeException", "tail" : "", "member" : "io.dylemma.spac.xml.XmlSpacException.MissingMandatoryAttributeException", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#MissingMandatoryAttributeException", "kind" : "object"}, {"label" : "MissingMandatoryAttributeException", "tail" : "", "member" : "io.dylemma.spac.xml.XmlSpacException.MissingMandatoryAttributeException", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#MissingMandatoryAttributeExceptionextendsSpacException[io.dylemma.spac.xml.XmlSpacException.MissingMandatoryAttributeException]", "kind" : "class"}, {"label" : "missingMandatoryAttribute", "tail" : "(attributeName: N, elem: Option[ElemStart])(arg0: AsQName[N]): MissingMandatoryAttributeException", "member" : "io.dylemma.spac.xml.XmlSpacException.missingMandatoryAttribute", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#missingMandatoryAttribute[N](attributeName:N,elem:Option[io.dylemma.spac.xml.XmlEvent.ElemStart])(implicitevidence$1:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.xml.XmlSpacException.MissingMandatoryAttributeException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/xml\/XmlSpacException.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlSpacException[Self]) => Boolean, msg: => Any): XmlSpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlSpacException[Self]) => Boolean): XmlSpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): XmlSpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): XmlSpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (XmlSpacException[Self], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (XmlSpacException[Self], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Unit) => Boolean): SingleItemContextMatcher[ElemStart, Unit]", "member" : "io.dylemma.spac.xml.elem.filter", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#filter(p:A=>Boolean):io.dylemma.spac.SingleItemContextMatcher[Item,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Unit) => Option[B]): SingleItemContextMatcher[ElemStart, B]", "member" : "io.dylemma.spac.xml.elem.flatMap", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#flatMap[B](f:A=>Option[B]):io.dylemma.spac.SingleItemContextMatcher[Item,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Unit) => B): SingleItemContextMatcher[ElemStart, B]", "member" : "io.dylemma.spac.xml.elem.map", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#map[B](f:A=>B):io.dylemma.spac.SingleItemContextMatcher[Item,B]", "kind" : "def"}, {"label" : "applyChained", "tail" : "(stack: IndexedSeq[ElemStart], offset: Int, avail: Int, next: ContextMatcher[ElemStart, B]): Option[(Unit, B)]", "member" : "io.dylemma.spac.xml.elem.applyChained", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#applyChained[B](stack:scala.collection.IndexedSeq[Item],offset:Int,avail:Int,next:io.dylemma.spac.ContextMatcher[Item,B]):Option[(A,B)]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "apply", "tail" : "(stack: IndexedSeq[ElemStart], offset: Int, avail: Int): Option[Unit]", "member" : "io.dylemma.spac.xml.elem.apply", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#apply(stack:scala.collection.IndexedSeq[Elem],offset:Int,avail:Int):Option[A]", "kind" : "def"}, {"label" : "applyElem", "tail" : "(elem: ElemStart): Option[Unit]", "member" : "io.dylemma.spac.xml.elem.applyElem", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#applyElem(elem:Item):Option[A]", "kind" : "def"}, {"label" : "addEarlyTrace", "tail" : "(firstTraceElems: SpacTraceElement*): Self", "member" : "io.dylemma.spac.SpacException.addEarlyTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#addEarlyTrace(firstTraceElems:io.dylemma.spac.SpacTraceElement*):Self", "kind" : "def"}, {"label" : "addEarlyTrace", "tail" : "(firstTrace: Chain[SpacTraceElement]): Self", "member" : "io.dylemma.spac.SpacException.addEarlyTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#addEarlyTrace(firstTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Self", "kind" : "def"}, {"label" : "addTrace", "tail" : "(nextTraceElems: SpacTraceElement*): Self", "member" : "io.dylemma.spac.SpacException.addTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#addTrace(nextTraceElems:io.dylemma.spac.SpacTraceElement*):Self", "kind" : "def"}, {"label" : "addTrace", "tail" : "(nextTrace: Chain[SpacTraceElement]): Self", "member" : "io.dylemma.spac.SpacException.addTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#addTrace(nextTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Self", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): SpacException[Self]", "member" : "io.dylemma.spac.SpacException.fillInStackTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#fillInStackTrace():io.dylemma.spac.SpacException[Self]", "kind" : "def"}, {"label" : "detail", "tail" : ": Either[String, Throwable]", "member" : "io.dylemma.spac.SpacException.detail", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#detail:Either[String,Throwable]", "kind" : "val"}, {"label" : "spacTrace", "tail" : ": Chain[SpacTraceElement]", "member" : "io.dylemma.spac.SpacException.spacTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#spacTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withSpacTrace", "tail" : "(spacTrace2: Chain[SpacTraceElement]): Self", "member" : "io.dylemma.spac.SpacException.withSpacTrace", "link" : "io\/dylemma\/spac\/xml\/XmlSpacException.html#withSpacTrace(spacTrace2:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Self", "kind" : "abstract def"}], "shortDescription" : "SpacException subtype for XML-specific exceptions"}, {"name" : "io.dylemma.spac.xml.XmlSplitterApplyOps", "shortDescription" : "Adds Splitter.xml, for constructing element matcher-based XmlSplitters.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlSplitterApplyOps) => Boolean, msg: => Any): XmlSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlSplitterApplyOps) => Boolean): XmlSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): XmlSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): XmlSplitterApplyOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (XmlSplitterApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (XmlSplitterApplyOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "xml", "tail" : "(matcher: ContextMatcher[ElemStart, C])(pos: CallerPos): XmlSplitter[C]", "member" : "io.dylemma.spac.xml.XmlSplitterApplyOps.xml", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#xml[C](matcher:io.dylemma.spac.ContextMatcher[io.dylemma.spac.xml.XmlEvent.ElemStart,C])(implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.xml.package.XmlSplitter[C]", "kind" : "def"}, {"member" : "io.dylemma.spac.xml.XmlSplitterApplyOps#<init>", "error" : "unsupported entity"}, {"label" : "splitter", "tail" : ": Splitter.type", "member" : "io.dylemma.spac.xml.XmlSplitterApplyOps.splitter", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#splitter:io.dylemma.spac.Splitter.type", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterApplyOps.html", "kind" : "class"}, {"name" : "io.dylemma.spac.xml.XmlSplitterOps", "shortDescription" : "XML-specific Splitter member methods, for example: attr, attrOpt, and text,", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlSplitterOps[C]) => Boolean, msg: => Any): XmlSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (XmlSplitterOps[C]) => Boolean): XmlSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): XmlSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): XmlSplitterOps[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (XmlSplitterOps[C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (XmlSplitterOps[C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.&", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.and", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[ElemStart, A2]): SingleItemContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.|", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[ElemStart, A2]): ContextMatcher[ElemStart, A2]", "member" : "io.dylemma.spac.xml.elem.or", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[ElemStart, B])(reduce: Aux[A1, B, R]): ContextMatcher[ElemStart, R]", "member" : "io.dylemma.spac.xml.elem.\\", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "asText", "tail" : "(): Transformer[XmlEvent, String]", "member" : "io.dylemma.spac.xml.XmlSplitterOps.asText", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#asText:io.dylemma.spac.Transformer[io.dylemma.spac.xml.XmlEvent,String]", "kind" : "def"}, {"label" : "text", "tail" : "(): Transformer[XmlEvent, String]", "member" : "io.dylemma.spac.xml.XmlSplitterOps.text", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#text:io.dylemma.spac.Transformer[io.dylemma.spac.xml.XmlEvent,String]", "kind" : "def"}, {"label" : "attrOpt", "tail" : "(name: N)(arg0: AsQName[N]): Transformer[XmlEvent, Option[String]]", "member" : "io.dylemma.spac.xml.XmlSplitterOps.attrOpt", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#attrOpt[N](name:N)(implicitevidence$6:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.Transformer[io.dylemma.spac.xml.XmlEvent,Option[String]]", "kind" : "def"}, {"label" : "attr", "tail" : "(name: N)(arg0: AsQName[N]): Transformer[XmlEvent, String]", "member" : "io.dylemma.spac.xml.XmlSplitterOps.attr", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#attr[N](name:N)(implicitevidence$5:io.dylemma.spac.xml.AsQName[N]):io.dylemma.spac.Transformer[io.dylemma.spac.xml.XmlEvent,String]", "kind" : "def"}, {"member" : "io.dylemma.spac.xml.XmlSplitterOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/xml\/package$$XmlSplitterOps.html", "kind" : "class"}], "io.dylemma.spac" : [{"name" : "io.dylemma.spac.CallerPos", "shortDescription" : "Represents a location in code that called a method.", "object" : "io\/dylemma\/spac\/CallerPos$.html", "members_object" : [{"label" : "locationMacro", "tail" : "(c: Context): scala.reflect.macros.Universe.Tree", "member" : "io.dylemma.spac.CallerPos.locationMacro", "link" : "io\/dylemma\/spac\/CallerPos$.html#locationMacro(c:scala.reflect.macros.blackbox.Context):c.universe.Tree", "kind" : "def"}, {"label" : "capture", "tail" : "(): CallerPos", "member" : "io.dylemma.spac.CallerPos.capture", "link" : "io\/dylemma\/spac\/CallerPos$.html#capture:io.dylemma.spac.CallerPos", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/CallerPos$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/CallerPos$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/CallerPos$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/CallerPos$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/CallerPos$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/CallerPos$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/CallerPos$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/CallerPos$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/CallerPos$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/CallerPos$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/CallerPos$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/CallerPos$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/CallerPos$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/CallerPos$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/CallerPos$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/CallerPos$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/CallerPos$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/CallerPos$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/CallerPos$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/CallerPos.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/CallerPos.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CallerPos) => Boolean, msg: => Any): CallerPos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/CallerPos.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CallerPos) => Boolean): CallerPos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/CallerPos.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CallerPos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/CallerPos.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CallerPos", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/CallerPos.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CallerPos, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/CallerPos.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CallerPos, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/CallerPos.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "render", "tail" : "(): String", "member" : "io.dylemma.spac.CallerPos.render", "link" : "io\/dylemma\/spac\/CallerPos.html#render:String", "kind" : "def"}, {"member" : "io.dylemma.spac.CallerPos#<init>", "error" : "unsupported entity"}, {"label" : "line", "tail" : ": Int", "member" : "io.dylemma.spac.CallerPos.line", "link" : "io\/dylemma\/spac\/CallerPos.html#line:Int", "kind" : "val"}, {"label" : "filename", "tail" : ": String", "member" : "io.dylemma.spac.CallerPos.filename", "link" : "io\/dylemma\/spac\/CallerPos.html#filename:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/dylemma\/spac\/CallerPos.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/CallerPos.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/CallerPos.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/CallerPos.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/CallerPos.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/CallerPos.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/CallerPos.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/CallerPos.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/CallerPos.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/CallerPos.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/CallerPos.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/CallerPos.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/CallerPos.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/CallerPos.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/CallerPos.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/CallerPos.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/CallerPos.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/dylemma\/spac\/CallerPos.html", "kind" : "case class"}, {"name" : "io.dylemma.spac.ContextChange", "trait" : "io\/dylemma\/spac\/ContextChange.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/ContextChange.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/ContextChange.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextChange[In, C]) => Boolean, msg: => Any): ContextChange[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextChange.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextChange[In, C]) => Boolean): ContextChange[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextChange.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ContextChange[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextChange.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ContextChange[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextChange.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ContextChange[In, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/ContextChange.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ContextChange[In, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/ContextChange.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "afterInput", "tail" : "(): StackInterpretation[In, C]", "member" : "io.dylemma.spac.ContextChange.afterInput", "link" : "io\/dylemma\/spac\/ContextChange.html#afterInput:io.dylemma.spac.StackInterpretation[In,C]", "kind" : "def"}, {"label" : "beforeInput", "tail" : "(): StackInterpretation[In, C]", "member" : "io.dylemma.spac.ContextChange.beforeInput", "link" : "io\/dylemma\/spac\/ContextChange.html#beforeInput:io.dylemma.spac.StackInterpretation[In,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextChange.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextChange.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextChange.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextChange.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextChange.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextChange.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextChange.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextChange.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextChange.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextChange.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextChange.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextChange.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/ContextChange.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextChange.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextChange.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ContextChange.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextChange.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextChange.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextChange.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Represents either entering (ContextPush) or exiting (ContextPop) some matched context within a stream of inputs."}, {"name" : "io.dylemma.spac.ContextLocation", "object" : "io\/dylemma\/spac\/ContextLocation$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "io.dylemma.spac.ContextLocation.Tag", "link" : "io\/dylemma\/spac\/ContextLocation$.html#Tag", "kind" : "object"}, {"label" : "Tag", "tail" : "", "member" : "io.dylemma.spac.ContextLocation.Tag", "link" : "io\/dylemma\/spac\/ContextLocation$.html#Tag[A]extendsAnyRef", "kind" : "abstract class"}, {"label" : "apply", "tail" : "(entries: Entry[_]*): ContextLocation", "member" : "io.dylemma.spac.ContextLocation.apply", "link" : "io\/dylemma\/spac\/ContextLocation$.html#apply(entries:io.dylemma.spac.ContextLocation.Entry[_]*):io.dylemma.spac.ContextLocation", "kind" : "def"}, {"label" : "Entry", "tail" : "", "member" : "io.dylemma.spac.ContextLocation.Entry", "link" : "io\/dylemma\/spac\/ContextLocation$.html#Entry[A]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "empty", "tail" : ": ContextLocation", "member" : "io.dylemma.spac.ContextLocation.empty", "link" : "io\/dylemma\/spac\/ContextLocation$.html#empty:io.dylemma.spac.ContextLocation", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextLocation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextLocation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextLocation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextLocation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextLocation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextLocation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextLocation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextLocation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextLocation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextLocation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextLocation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextLocation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/ContextLocation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextLocation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextLocation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ContextLocation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextLocation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextLocation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextLocation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/ContextLocation.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/ContextLocation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/ContextLocation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextLocation) => Boolean, msg: => Any): ContextLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextLocation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextLocation) => Boolean): ContextLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextLocation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ContextLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextLocation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ContextLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextLocation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ContextLocation, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/ContextLocation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ContextLocation, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/ContextLocation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.dylemma.spac.ContextLocation.toString", "link" : "io\/dylemma\/spac\/ContextLocation.html#toString():String", "kind" : "def"}, {"label" : "tagsForToString", "tail" : "(): Iterable[Tag[_]]", "member" : "io.dylemma.spac.ContextLocation.tagsForToString", "link" : "io\/dylemma\/spac\/ContextLocation.html#tagsForToString:Iterable[io.dylemma.spac.ContextLocation.Tag[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextLocation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextLocation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextLocation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextLocation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextLocation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextLocation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextLocation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextLocation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextLocation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextLocation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextLocation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextLocation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextLocation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextLocation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ContextLocation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextLocation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextLocation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextLocation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(tag: Tag[A]): Option[A]", "member" : "io.dylemma.spac.ContextLocation.get", "link" : "io\/dylemma\/spac\/ContextLocation.html#get[A](tag:io.dylemma.spac.ContextLocation.Tag[A]):Option[A]", "kind" : "abstract def"}], "shortDescription" : "A map-like representation of some location in a stream,used like stack trace elements for reporting errors in stream processing."}, {"name" : "io.dylemma.spac.ContextMatcher", "object" : "io\/dylemma\/spac\/ContextMatcher$.html", "members_object" : [{"label" : "Or", "tail" : "", "member" : "io.dylemma.spac.ContextMatcher.Or", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#Or[Elem,A]extendsContextMatcher[Elem,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Mapped", "tail" : "", "member" : "io.dylemma.spac.ContextMatcher.Mapped", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#Mapped[Elem,A,B]extendsContextMatcher[Elem,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Chained", "tail" : "", "member" : "io.dylemma.spac.ContextMatcher.Chained", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#Chained[Elem,H,T,F]extendsContextMatcher[Elem,F]withProductwithSerializable", "kind" : "case class"}, {"label" : "greedy", "tail" : "(f: (IndexedSeq[Elem], Int, Int) => Option[(A, Int)]): ContextMatcher[Elem, A]", "member" : "io.dylemma.spac.ContextMatcher.greedy", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#greedy[Elem,A](f:(scala.collection.IndexedSeq[Elem],Int,Int)=>Option[(A,Int)]):io.dylemma.spac.ContextMatcher[Elem,A]", "kind" : "def"}, {"label" : "variableLength", "tail" : "(): ContextMatcher[Elem, Unit]", "member" : "io.dylemma.spac.ContextMatcher.variableLength", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#variableLength[Elem]:io.dylemma.spac.ContextMatcher[Elem,Unit]", "kind" : "def"}, {"label" : "noopFailure", "tail" : "(): ContextMatcher[Elem, Unit]", "member" : "io.dylemma.spac.ContextMatcher.noopFailure", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#noopFailure[Elem]:io.dylemma.spac.ContextMatcher[Elem,Unit]", "kind" : "def"}, {"label" : "noopSuccess", "tail" : "(): ContextMatcher[Elem, Unit]", "member" : "io.dylemma.spac.ContextMatcher.noopSuccess", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#noopSuccess[Elem]:io.dylemma.spac.ContextMatcher[Elem,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextMatcher$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextMatcher$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/ContextMatcher.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/ContextMatcher.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/ContextMatcher.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextMatcher[Elem, A]) => Boolean, msg: => Any): ContextMatcher[Elem, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextMatcher.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextMatcher[Elem, A]) => Boolean): ContextMatcher[Elem, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextMatcher.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ContextMatcher[Elem, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextMatcher.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ContextMatcher[Elem, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextMatcher.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ContextMatcher[Elem, A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/ContextMatcher.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ContextMatcher[Elem, A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/ContextMatcher.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[Elem, A2]): ContextMatcher[Elem, A2]", "member" : "io.dylemma.spac.ContextMatcher.|", "link" : "io\/dylemma\/spac\/ContextMatcher.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[Elem, A2]): ContextMatcher[Elem, A2]", "member" : "io.dylemma.spac.ContextMatcher.or", "link" : "io\/dylemma\/spac\/ContextMatcher.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): ContextMatcher[Elem, A]", "member" : "io.dylemma.spac.ContextMatcher.filter", "link" : "io\/dylemma\/spac\/ContextMatcher.html#filter(p:A=>Boolean):io.dylemma.spac.ContextMatcher[Elem,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Option[B]): ContextMatcher[Elem, B]", "member" : "io.dylemma.spac.ContextMatcher.flatMap", "link" : "io\/dylemma\/spac\/ContextMatcher.html#flatMap[B](f:A=>Option[B]):io.dylemma.spac.ContextMatcher[Elem,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ContextMatcher[Elem, B]", "member" : "io.dylemma.spac.ContextMatcher.map", "link" : "io\/dylemma\/spac\/ContextMatcher.html#map[B](f:A=>B):io.dylemma.spac.ContextMatcher[Elem,B]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[Elem, B])(reduce: Aux[A1, B, R]): ContextMatcher[Elem, R]", "member" : "io.dylemma.spac.ContextMatcher.\\", "link" : "io\/dylemma\/spac\/ContextMatcher.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "apply", "tail" : "(stack: IndexedSeq[Elem], offset: Int, avail: Int): Option[A]", "member" : "io.dylemma.spac.ContextMatcher.apply", "link" : "io\/dylemma\/spac\/ContextMatcher.html#apply(stack:scala.collection.IndexedSeq[Elem],offset:Int,avail:Int):Option[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextMatcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextMatcher.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextMatcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextMatcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextMatcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextMatcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextMatcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextMatcher.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextMatcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextMatcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextMatcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextMatcher.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/ContextMatcher.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextMatcher.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextMatcher.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ContextMatcher.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextMatcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextMatcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextMatcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "applyChained", "tail" : "(stack: IndexedSeq[Elem], offset: Int, avail: Int, next: ContextMatcher[Elem, B]): Option[(A, B)]", "member" : "io.dylemma.spac.ContextMatcher.applyChained", "link" : "io\/dylemma\/spac\/ContextMatcher.html#applyChained[B](stack:scala.collection.IndexedSeq[Elem],offset:Int,avail:Int,next:io.dylemma.spac.ContextMatcher[Elem,B]):Option[(A,B)]", "kind" : "abstract def"}], "shortDescription" : "An object responsible for inspecting a stack of StartElement events and determining if they correspondto some \"context\" value of type A."}, {"name" : "io.dylemma.spac.ContextPop", "shortDescription" : "", "object" : "io\/dylemma\/spac\/ContextPop$.html", "members_object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/dylemma\/spac\/ContextPop$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "io\/dylemma\/spac\/ContextPop$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "afterInput", "tail" : "(): StackInterpretation[Nothing, Nothing]", "member" : "io.dylemma.spac.ContextChange.afterInput", "link" : "io\/dylemma\/spac\/ContextPop$.html#afterInput:io.dylemma.spac.StackInterpretation[In,C]", "kind" : "def"}, {"label" : "beforeInput", "tail" : "(): StackInterpretation[Nothing, Nothing]", "member" : "io.dylemma.spac.ContextChange.beforeInput", "link" : "io\/dylemma\/spac\/ContextPop$.html#beforeInput:io.dylemma.spac.StackInterpretation[In,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextPop$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextPop$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextPop$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextPop$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextPop$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextPop$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextPop$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextPop$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextPop$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextPop$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextPop$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextPop$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextPop$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextPop$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextPop$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextPop$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextPop$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.dylemma.spac.ContextPush", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/ContextPush.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/ContextPush.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextPush[In, C]) => Boolean, msg: => Any): ContextPush[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextPush.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextPush[In, C]) => Boolean): ContextPush[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextPush.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ContextPush[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextPush.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ContextPush[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextPush.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ContextPush[In, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/ContextPush.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ContextPush[In, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/ContextPush.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.dylemma.spac.ContextPush#<init>", "error" : "unsupported entity"}, {"label" : "context", "tail" : ": C", "member" : "io.dylemma.spac.ContextPush.context", "link" : "io\/dylemma\/spac\/ContextPush.html#context:C", "kind" : "val"}, {"label" : "location", "tail" : ": ContextTrace[In]", "member" : "io.dylemma.spac.ContextPush.location", "link" : "io\/dylemma\/spac\/ContextPush.html#location:io.dylemma.spac.ContextTrace[In]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/dylemma\/spac\/ContextPush.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "afterInput", "tail" : "(): StackInterpretation[In, C]", "member" : "io.dylemma.spac.ContextChange.afterInput", "link" : "io\/dylemma\/spac\/ContextPush.html#afterInput:io.dylemma.spac.StackInterpretation[In,C]", "kind" : "def"}, {"label" : "beforeInput", "tail" : "(): StackInterpretation[In, C]", "member" : "io.dylemma.spac.ContextChange.beforeInput", "link" : "io\/dylemma\/spac\/ContextPush.html#beforeInput:io.dylemma.spac.StackInterpretation[In,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextPush.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextPush.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextPush.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextPush.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextPush.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextPush.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextPush.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextPush.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextPush.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextPush.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextPush.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextPush.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextPush.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextPush.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextPush.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextPush.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/dylemma\/spac\/ContextPush.html", "kind" : "case class"}, {"name" : "io.dylemma.spac.ContextTrace", "shortDescription" : "", "object" : "io\/dylemma\/spac\/ContextTrace$.html", "members_object" : [{"label" : "empty", "tail" : "(): ContextTrace[Nothing]", "member" : "io.dylemma.spac.ContextTrace.empty", "link" : "io\/dylemma\/spac\/ContextTrace$.html#empty:io.dylemma.spac.ContextTrace[Nothing]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextTrace$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextTrace$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextTrace$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextTrace$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextTrace$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextTrace$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextTrace$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextTrace$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextTrace$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextTrace$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextTrace$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextTrace$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/ContextTrace$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextTrace$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ContextTrace$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ContextTrace$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextTrace$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextTrace$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextTrace$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/ContextTrace.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/ContextTrace.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextTrace[A]) => Boolean, msg: => Any): ContextTrace[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextTrace.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextTrace[A]) => Boolean): ContextTrace[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextTrace.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ContextTrace[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextTrace.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ContextTrace[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ContextTrace.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ContextTrace[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/ContextTrace.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ContextTrace[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/ContextTrace.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asSpacTraceElems", "tail" : "(): Chain[InInputContext[A2]]", "member" : "io.dylemma.spac.ContextTrace.asSpacTraceElems", "link" : "io\/dylemma\/spac\/ContextTrace.html#asSpacTraceElems[A2>:A]:cats.data.Chain[io.dylemma.spac.SpacTraceElement.InInputContext[A2]]", "kind" : "def"}, {"label" : "\/", "tail" : "(subContext: ContextTrace[A2]): ContextTrace[A2]", "member" : "io.dylemma.spac.ContextTrace.\/", "link" : "io\/dylemma\/spac\/ContextTrace.html#\/[A2>:A](subContext:io.dylemma.spac.ContextTrace[A2]):io.dylemma.spac.ContextTrace[A2]", "kind" : "def"}, {"member" : "io.dylemma.spac.ContextTrace#<init>", "error" : "unsupported entity"}, {"label" : "elems", "tail" : ": Chain[(ContextLocation, A)]", "member" : "io.dylemma.spac.ContextTrace.elems", "link" : "io\/dylemma\/spac\/ContextTrace.html#elems:cats.data.Chain[(io.dylemma.spac.ContextLocation,A)]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/dylemma\/spac\/ContextTrace.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ContextTrace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ContextTrace.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ContextTrace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ContextTrace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ContextTrace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ContextTrace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ContextTrace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextTrace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextTrace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ContextTrace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ContextTrace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ContextTrace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ContextTrace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ContextTrace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ContextTrace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ContextTrace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/dylemma\/spac\/ContextTrace.html", "kind" : "case class"}, {"name" : "io.dylemma.spac.HasLocation", "trait" : "io\/dylemma\/spac\/HasLocation.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/HasLocation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/HasLocation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HasLocation) => Boolean, msg: => Any): HasLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/HasLocation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HasLocation) => Boolean): HasLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/HasLocation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): HasLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/HasLocation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): HasLocation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/HasLocation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (HasLocation, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/HasLocation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (HasLocation, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/HasLocation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/HasLocation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/HasLocation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/HasLocation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/HasLocation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/HasLocation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/HasLocation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/HasLocation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/HasLocation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/HasLocation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/HasLocation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/HasLocation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/HasLocation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/HasLocation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/HasLocation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/HasLocation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/HasLocation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/HasLocation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/HasLocation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/HasLocation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "location", "tail" : "(): ContextLocation", "member" : "io.dylemma.spac.HasLocation.location", "link" : "io\/dylemma\/spac\/HasLocation.html#location:io.dylemma.spac.ContextLocation", "kind" : "abstract def"}], "shortDescription" : "Marker trait used by SpacTraceElement.InInput to extract location information from inputs that cause parsing exceptions."}, {"name" : "io.dylemma.spac.LowPriorityTypeReduceImplicits", "trait" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LowPriorityTypeReduceImplicits) => Boolean, msg: => Any): LowPriorityTypeReduceImplicits", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LowPriorityTypeReduceImplicits) => Boolean): LowPriorityTypeReduceImplicits", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): LowPriorityTypeReduceImplicits", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LowPriorityTypeReduceImplicits", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LowPriorityTypeReduceImplicits, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LowPriorityTypeReduceImplicits, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "noopFlatten", "tail" : "(): Aux[L, R, (L, R)]", "member" : "io.dylemma.spac.LowPriorityTypeReduceImplicits.noopFlatten", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#noopFlatten[L,R]:io.dylemma.spac.TypeReduce.Aux[L,R,(L,R)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/LowPriorityTypeReduceImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "io.dylemma.spac.Parser", "object" : "io\/dylemma\/spac\/Parser$.html", "members_object" : [{"label" : "FollowedBy", "tail" : "", "member" : "io.dylemma.spac.Parser.FollowedBy", "link" : "io\/dylemma\/spac\/Parser$.html#FollowedBy[In,+A,M[-_,+_]]extendsAnyRef", "kind" : "trait"}, {"label" : "catsApplicativeForParser", "tail" : "(callerPos: CallerPos): Applicative[[A]Parser[In, A]]", "member" : "io.dylemma.spac.Parser.catsApplicativeForParser", "link" : "io\/dylemma\/spac\/Parser$.html#catsApplicativeForParser[In](implicitcallerPos:io.dylemma.spac.CallerPos):cats.Applicative[[A]io.dylemma.spac.Parser[In,A]]", "kind" : "implicit def"}, {"label" : "ParserFollowedByOps", "tail" : "", "member" : "io.dylemma.spac.Parser.ParserFollowedByOps", "link" : "io\/dylemma\/spac\/Parser$.html#ParserFollowedByOps[In,A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ParserFlatten", "tail" : "", "member" : "io.dylemma.spac.Parser.ParserFlatten", "link" : "io\/dylemma\/spac\/Parser$.html#ParserFlatten[In,A,F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "oneOf", "tail" : "(parsers: Parser[In, Out]*): Parser[In, Out]", "member" : "io.dylemma.spac.Parser.oneOf", "link" : "io\/dylemma\/spac\/Parser$.html#oneOf[In,Out](parsers:io.dylemma.spac.Parser[In,Out]*):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "constant", "tail" : "(value: Out): Parser[Any, Out]", "member" : "io.dylemma.spac.Parser.constant", "link" : "io\/dylemma\/spac\/Parser$.html#constant[Out](value:Out):io.dylemma.spac.Parser[Any,Out]", "kind" : "def"}, {"label" : "drain", "tail" : "(): Parser[Any, Unit]", "member" : "io.dylemma.spac.Parser.drain", "link" : "io\/dylemma\/spac\/Parser$.html#drain:io.dylemma.spac.Parser[Any,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (In) => Any): Parser[In, Unit]", "member" : "io.dylemma.spac.Parser.foreach", "link" : "io\/dylemma\/spac\/Parser$.html#foreach[In](f:In=>Any):io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (In) => Unit): Parser[In, Unit]", "member" : "io.dylemma.spac.Parser.tap", "link" : "io\/dylemma\/spac\/Parser$.html#tap[In](f:In=>Unit):io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "toMap", "tail" : "(): Parser[(K, V), Map[K, V]]", "member" : "io.dylemma.spac.Parser.toMap", "link" : "io\/dylemma\/spac\/Parser$.html#toMap[K,V]:io.dylemma.spac.Parser[(K,V),Map[K,V]]", "kind" : "def"}, {"label" : "toChain", "tail" : "(): Parser[In, Chain[In]]", "member" : "io.dylemma.spac.Parser.toChain", "link" : "io\/dylemma\/spac\/Parser$.html#toChain[In]:io.dylemma.spac.Parser[In,cats.data.Chain[In]]", "kind" : "def"}, {"label" : "toList", "tail" : "(): Parser[In, List[In]]", "member" : "io.dylemma.spac.Parser.toList", "link" : "io\/dylemma\/spac\/Parser$.html#toList[In]:io.dylemma.spac.Parser[In,List[In]]", "kind" : "def"}, {"label" : "fromBuilder", "tail" : "(b: => Builder[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.Parser.fromBuilder", "link" : "io\/dylemma\/spac\/Parser$.html#fromBuilder[In,Out](b:=>scala.collection.mutable.Builder[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "deferHandler", "tail" : "(h: => Handler[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.Parser.deferHandler", "link" : "io\/dylemma\/spac\/Parser$.html#deferHandler[In,Out](h:=>io.dylemma.spac.Parser.Handler[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "defer", "tail" : "(p: => Parser[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.Parser.defer", "link" : "io\/dylemma\/spac\/Parser$.html#defer[In,Out](p:=>io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "delay", "tail" : "(value: => Out): Parser[Any, Out]", "member" : "io.dylemma.spac.Parser.delay", "link" : "io\/dylemma\/spac\/Parser$.html#delay[Out](value:=>Out):io.dylemma.spac.Parser[Any,Out]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: Out): Parser[Any, Out]", "member" : "io.dylemma.spac.Parser.pure", "link" : "io\/dylemma\/spac\/Parser$.html#pure[Out](value:Out):io.dylemma.spac.Parser[Any,Out]", "kind" : "def"}, {"label" : "fold", "tail" : "(init: Out)(op: (Out, In) => Out): Parser[In, Out]", "member" : "io.dylemma.spac.Parser.fold", "link" : "io\/dylemma\/spac\/Parser$.html#fold[In,Out](init:Out)(op:(Out,In)=>Out):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "find", "tail" : "(predicate: (In) => Boolean): Parser[In, Option[In]]", "member" : "io.dylemma.spac.Parser.find", "link" : "io\/dylemma\/spac\/Parser$.html#find[In](predicate:In=>Boolean):io.dylemma.spac.Parser[In,Option[In]]", "kind" : "def"}, {"label" : "first", "tail" : "(arg0: TypeName[In]): Parser[In, In]", "member" : "io.dylemma.spac.Parser.first", "link" : "io\/dylemma\/spac\/Parser$.html#first[In](implicitevidence$1:org.tpolecat.typename.TypeName[In]):io.dylemma.spac.Parser[In,In]", "kind" : "def"}, {"label" : "firstOption", "tail" : "(): Parser[In, Option[In]]", "member" : "io.dylemma.spac.Parser.firstOption", "link" : "io\/dylemma\/spac\/Parser$.html#firstOption[In]:io.dylemma.spac.Parser[In,Option[In]]", "kind" : "def"}, {"label" : "firstOpt", "tail" : "(): Parser[In, Option[In]]", "member" : "io.dylemma.spac.Parser.firstOpt", "link" : "io\/dylemma\/spac\/Parser$.html#firstOpt[In]:io.dylemma.spac.Parser[In,Option[In]]", "kind" : "def"}, {"label" : "apply", "tail" : "(): ParserApplyWithBoundInput[In]", "member" : "io.dylemma.spac.Parser.apply", "link" : "io\/dylemma\/spac\/Parser$.html#apply[In]:io.dylemma.spac.ParserApplyWithBoundInput[In]", "kind" : "def"}, {"label" : "Handler", "tail" : "", "member" : "io.dylemma.spac.Parser.Handler", "link" : "io\/dylemma\/spac\/Parser$.html#Handler[-In,+Out]extendsAnyRef", "kind" : "trait"}, {"label" : "Stateless", "tail" : "", "member" : "io.dylemma.spac.Parser.Stateless", "link" : "io\/dylemma\/spac\/Parser$.html#Stateless[-In,+Out]extendsParser[In,Out]withParser.Handler[In,Out]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Parser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Parser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Parser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Parser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Parser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Parser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Parser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Parser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Parser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Parser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Parser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Parser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Parser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Parser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Parser$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Parser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Parser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Parser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Parser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/Parser.html", "kind" : "trait", "members_trait" : [{"label" : "followedByStream", "tail" : "(): FollowedBy[In, Out, Transformer]", "member" : "io.dylemma.spac.Parser.ParserFollowedByOps.followedByStream", "link" : "io\/dylemma\/spac\/Parser.html#followedByStream:io.dylemma.spac.Parser.FollowedBy[In,A,io.dylemma.spac.Transformer]", "kind" : "def"}, {"label" : "followedBy", "tail" : "(): FollowedBy[In, Out, Parser]", "member" : "io.dylemma.spac.Parser.ParserFollowedByOps.followedBy", "link" : "io\/dylemma\/spac\/Parser.html#followedBy:io.dylemma.spac.Parser.FollowedBy[In,A,io.dylemma.spac.Parser]", "kind" : "def"}, {"label" : "followedByParser", "tail" : "(): FollowedBy[In, Out, Parser]", "member" : "io.dylemma.spac.Parser.ParserFollowedByOps.followedByParser", "link" : "io\/dylemma\/spac\/Parser.html#followedByParser:io.dylemma.spac.Parser.FollowedBy[In,A,io.dylemma.spac.Parser]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/Parser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/Parser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Parser[In, Out]) => Boolean, msg: => Any): Parser[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Parser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Parser[In, Out]) => Boolean): Parser[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Parser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Parser[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Parser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Parser[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Parser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Parser[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/Parser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Parser[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/Parser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "start", "tail" : "(methodName: String)(pos: CallerPos): Handler[In, Out]", "member" : "io.dylemma.spac.Parser.start", "link" : "io\/dylemma\/spac\/Parser.html#start(methodName:String)(implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.Parser.Handler[In,Out]", "kind" : "def"}, {"label" : "parse", "tail" : "(source: Source[In])(pos: CallerPos): Out", "member" : "io.dylemma.spac.Parser.parse", "link" : "io\/dylemma\/spac\/Parser.html#parse(source:io.dylemma.spac.Source[In])(implicitpos:io.dylemma.spac.CallerPos):Out", "kind" : "def"}, {"label" : "parse", "tail" : "(inputs: Iterator[In])(pos: CallerPos): Out", "member" : "io.dylemma.spac.Parser.parse", "link" : "io\/dylemma\/spac\/Parser.html#parse(inputs:Iterator[In])(implicitpos:io.dylemma.spac.CallerPos):Out", "kind" : "def"}, {"label" : "asTransformer", "tail" : "(): Transformer[In, Out]", "member" : "io.dylemma.spac.Parser.asTransformer", "link" : "io\/dylemma\/spac\/Parser.html#asTransformer:io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "upcast", "tail" : "(ev: <:<[Out, Out2]): Parser[In, Out2]", "member" : "io.dylemma.spac.Parser.upcast", "link" : "io\/dylemma\/spac\/Parser.html#upcast[Out2](implicitev:Out<:<Out2):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : "beforeContext", "tail" : "(matcher: ContextMatcher[StackElem, Any])(stackable: StackLike[I2, StackElem], pos: CallerPos): Parser[I2, Out]", "member" : "io.dylemma.spac.Parser.beforeContext", "link" : "io\/dylemma\/spac\/Parser.html#beforeContext[I2<:In,StackElem](matcher:io.dylemma.spac.ContextMatcher[StackElem,Any])(implicitstackable:io.dylemma.spac.StackLike[I2,StackElem],implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.Parser[I2,Out]", "kind" : "def"}, {"label" : "interruptedBy", "tail" : "(interrupter: Parser[I2, Any]): Parser[I2, Out]", "member" : "io.dylemma.spac.Parser.interruptedBy", "link" : "io\/dylemma\/spac\/Parser.html#interruptedBy[I2<:In](interrupter:io.dylemma.spac.Parser[I2,Any]):io.dylemma.spac.Parser[I2,Out]", "kind" : "def"}, {"label" : "expectInputs", "tail" : "(expectations: List[(String, (I2) => Boolean)]): Parser[I2, Out]", "member" : "io.dylemma.spac.Parser.expectInputs", "link" : "io\/dylemma\/spac\/Parser.html#expectInputs[I2<:In](expectations:List[(String,I2=>Boolean)]):io.dylemma.spac.Parser[I2,Out]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(ev: <:<[Out, Either[Throwable, T]]): Parser[In, T]", "member" : "io.dylemma.spac.Parser.rethrow", "link" : "io\/dylemma\/spac\/Parser.html#rethrow[T](implicitev:Out<:<Either[Throwable,T]):io.dylemma.spac.Parser[In,T]", "kind" : "def"}, {"label" : "attempt", "tail" : "(): Parser[In, Either[Throwable, Out]]", "member" : "io.dylemma.spac.Parser.attempt", "link" : "io\/dylemma\/spac\/Parser.html#attempt:io.dylemma.spac.Parser[In,Either[Throwable,Out]]", "kind" : "def"}, {"label" : "unwrapSafe", "tail" : "(ev: <:<[Out, Try[T]]): Parser[In, T]", "member" : "io.dylemma.spac.Parser.unwrapSafe", "link" : "io\/dylemma\/spac\/Parser.html#unwrapSafe[T](implicitev:Out<:<scala.util.Try[T]):io.dylemma.spac.Parser[In,T]", "kind" : "def"}, {"label" : "wrapSafe", "tail" : "(): Parser[In, Try[Out]]", "member" : "io.dylemma.spac.Parser.wrapSafe", "link" : "io\/dylemma\/spac\/Parser.html#wrapSafe:io.dylemma.spac.Parser[In,scala.util.Try[Out]]", "kind" : "def"}, {"label" : "orElse", "tail" : "(fallback: Parser[In2, Out2]): Parser[In2, Out2]", "member" : "io.dylemma.spac.Parser.orElse", "link" : "io\/dylemma\/spac\/Parser.html#orElse[In2<:In,Out2>:Out](fallback:io.dylemma.spac.Parser[In2,Out2]):io.dylemma.spac.Parser[In2,Out2]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Out) => Out2): Parser[In, Out2]", "member" : "io.dylemma.spac.Parser.map", "link" : "io\/dylemma\/spac\/Parser.html#map[Out2](f:Out=>Out2):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): Parser[In, Out]", "member" : "io.dylemma.spac.Parser.withName", "link" : "io\/dylemma\/spac\/Parser.html#withName(name:String):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Parser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Parser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Parser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Parser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Parser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Parser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Parser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Parser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Parser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Parser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Parser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Parser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Parser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Parser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Parser.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Parser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Parser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Parser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Parser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "newHandler", "tail" : "(): Handler[In, Out]", "member" : "io.dylemma.spac.Parser.newHandler", "link" : "io\/dylemma\/spac\/Parser.html#newHandler:io.dylemma.spac.Parser.Handler[In,Out]", "kind" : "abstract def"}], "shortDescription" : "Primary \"spac\" abstraction which represents a sink for data events."}, {"name" : "io.dylemma.spac.ParserApplyWithBoundInput", "shortDescription" : "Convenience version of the Parser companion object, which provides parser constructors with the In type already specified.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserApplyWithBoundInput[In]) => Boolean, msg: => Any): ParserApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserApplyWithBoundInput[In]) => Boolean): ParserApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ParserApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ParserApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ParserApplyWithBoundInput[In], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ParserApplyWithBoundInput[In], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "oneOf", "tail" : "(parsers: Parser[In, Out]*): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.oneOf", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#oneOf[Out](parsers:io.dylemma.spac.Parser[In,Out]*):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "drain", "tail" : "(): Parser[In, Unit]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.drain", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#drain:io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (In) => Unit): Parser[In, Unit]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.tap", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#tap(f:In=>Unit):io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[In, (K, V)]): Parser[(K, V), Map[K, V]]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.toMap", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#toMap[K,V](implicitev:In<:<(K,V)):io.dylemma.spac.Parser[(K,V),Map[K,V]]", "kind" : "def"}, {"label" : "toChain", "tail" : "(): Parser[In, Chain[In]]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.toChain", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#toChain:io.dylemma.spac.Parser[In,cats.data.Chain[In]]", "kind" : "def"}, {"label" : "toList", "tail" : "(): Parser[In, List[In]]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.toList", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#toList:io.dylemma.spac.Parser[In,List[In]]", "kind" : "def"}, {"label" : "fromBuilder", "tail" : "(b: => Builder[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.fromBuilder", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#fromBuilder[Out](b:=>scala.collection.mutable.Builder[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "deferHandler", "tail" : "(h: => Handler[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.deferHandler", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#deferHandler[Out](h:=>io.dylemma.spac.Parser.Handler[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "defer", "tail" : "(p: => Parser[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.defer", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#defer[Out](p:=>io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "delay", "tail" : "(value: => Out): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.delay", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#delay[Out](value:=>Out):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: Out): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.pure", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#pure[Out](value:Out):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "fold", "tail" : "(init: Out)(op: (Out, In) => Out): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.fold", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#fold[Out](init:Out)(op:(Out,In)=>Out):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"label" : "find", "tail" : "(predicate: (In) => Boolean): Parser[In, Option[In]]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.find", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#find(predicate:In=>Boolean):io.dylemma.spac.Parser[In,Option[In]]", "kind" : "def"}, {"label" : "first", "tail" : "(In: TypeName[In]): Parser[In, In]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.first", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#first(implicitIn:org.tpolecat.typename.TypeName[In]):io.dylemma.spac.Parser[In,In]", "kind" : "def"}, {"label" : "firstOpt", "tail" : "(): Parser[In, Option[In]]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.firstOpt", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#firstOpt:io.dylemma.spac.Parser[In,Option[In]]", "kind" : "def"}, {"label" : "apply", "tail" : "(parser: Parser[In, Out]): Parser[In, Out]", "member" : "io.dylemma.spac.ParserApplyWithBoundInput.apply", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#apply[Out](implicitparser:io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Parser[In,Out]", "kind" : "def"}, {"member" : "io.dylemma.spac.ParserApplyWithBoundInput#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/ParserApplyWithBoundInput.html", "kind" : "class"}, {"name" : "io.dylemma.spac.Signal", "object" : "io\/dylemma\/spac\/Signal$.html", "members_object" : [{"label" : "Continue", "tail" : "", "member" : "io.dylemma.spac.Signal.Continue", "link" : "io\/dylemma\/spac\/Signal$.html#Continue", "kind" : "object"}, {"label" : "Stop", "tail" : "", "member" : "io.dylemma.spac.Signal.Stop", "link" : "io\/dylemma\/spac\/Signal$.html#Stop", "kind" : "object"}, {"label" : "continueIf", "tail" : "(shouldContinue: Boolean): Signal", "member" : "io.dylemma.spac.Signal.continueIf", "link" : "io\/dylemma\/spac\/Signal$.html#continueIf(shouldContinue:Boolean):io.dylemma.spac.Signal", "kind" : "def"}, {"label" : "stopIf", "tail" : "(shouldStop: Boolean): Signal", "member" : "io.dylemma.spac.Signal.stopIf", "link" : "io\/dylemma\/spac\/Signal$.html#stopIf(shouldStop:Boolean):io.dylemma.spac.Signal", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Signal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Signal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Signal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Signal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Signal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Signal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Signal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Signal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Signal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Signal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Signal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Signal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Signal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Signal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Signal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Signal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Signal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Signal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Signal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/Signal.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/Signal.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/Signal.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Signal) => Boolean, msg: => Any): Signal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Signal.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Signal) => Boolean): Signal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Signal.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Signal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Signal.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Signal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Signal.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Signal, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/Signal.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Signal, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/Signal.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "||", "tail" : "(that: => Signal): Signal", "member" : "io.dylemma.spac.Signal.||", "link" : "io\/dylemma\/spac\/Signal.html#||(that:=>io.dylemma.spac.Signal):io.dylemma.spac.Signal", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Signal): Signal", "member" : "io.dylemma.spac.Signal.&&", "link" : "io\/dylemma\/spac\/Signal.html#&&(that:io.dylemma.spac.Signal):io.dylemma.spac.Signal", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Signal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Signal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Signal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Signal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Signal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Signal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Signal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Signal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Signal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Signal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Signal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Signal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Signal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Signal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Signal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Signal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Signal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Signal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Signal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isStop", "tail" : "(): Boolean", "member" : "io.dylemma.spac.Signal.isStop", "link" : "io\/dylemma\/spac\/Signal.html#isStop:Boolean", "kind" : "abstract def"}], "shortDescription" : "Value used by Transformer.Handler to indicate to its upstream producerwhether or not the handler wants to continue receiving values."}, {"name" : "io.dylemma.spac.SingleItemContextMatcher", "object" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html", "members_object" : [{"label" : "Mapped", "tail" : "", "member" : "io.dylemma.spac.SingleItemContextMatcher.Mapped", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#Mapped[Item,A,B]extendsSingleItemContextMatcher[Item,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Or", "tail" : "", "member" : "io.dylemma.spac.SingleItemContextMatcher.Or", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#Or[Item,A]extendsSingleItemContextMatcher[Item,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "And", "tail" : "", "member" : "io.dylemma.spac.SingleItemContextMatcher.And", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#And[Item,A,B,R]extendsSingleItemContextMatcher[Item,R]withProductwithSerializable", "kind" : "case class"}, {"label" : "Predicate", "tail" : "", "member" : "io.dylemma.spac.SingleItemContextMatcher.Predicate", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#Predicate[Item]extendsSingleItemContextMatcher[Item,Unit]", "kind" : "class"}, {"label" : "Default", "tail" : "", "member" : "io.dylemma.spac.SingleItemContextMatcher.Default", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#Default[Item,A]extendsSingleItemContextMatcher[Item,A]", "kind" : "class"}, {"label" : "predicate", "tail" : "(name: String, f: (Item) => Boolean): SingleItemContextMatcher[Item, Unit]", "member" : "io.dylemma.spac.SingleItemContextMatcher.predicate", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#predicate[Item](name:String,f:Item=>Boolean):io.dylemma.spac.SingleItemContextMatcher[Item,Unit]", "kind" : "def"}, {"label" : "predicate", "tail" : "(f: (Item) => Boolean): SingleItemContextMatcher[Item, Unit]", "member" : "io.dylemma.spac.SingleItemContextMatcher.predicate", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#predicate[Item](f:Item=>Boolean):io.dylemma.spac.SingleItemContextMatcher[Item,Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, f: (Item) => Option[A]): SingleItemContextMatcher[Item, A]", "member" : "io.dylemma.spac.SingleItemContextMatcher.apply", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#apply[Item,A](name:String,f:Item=>Option[A]):io.dylemma.spac.SingleItemContextMatcher[Item,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (Item) => Option[A]): SingleItemContextMatcher[Item, A]", "member" : "io.dylemma.spac.SingleItemContextMatcher.apply", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#apply[Item,A](f:Item=>Option[A]):io.dylemma.spac.SingleItemContextMatcher[Item,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/SingleItemContextMatcher.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SingleItemContextMatcher[Item, A]) => Boolean, msg: => Any): SingleItemContextMatcher[Item, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SingleItemContextMatcher[Item, A]) => Boolean): SingleItemContextMatcher[Item, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SingleItemContextMatcher[Item, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SingleItemContextMatcher[Item, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SingleItemContextMatcher[Item, A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SingleItemContextMatcher[Item, A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&", "tail" : "(that: SingleItemContextMatcher[Item, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[Item, R]", "member" : "io.dylemma.spac.SingleItemContextMatcher.&", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#&[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "and", "tail" : "(that: SingleItemContextMatcher[Item, B])(reduce: Aux[A1, B, R]): SingleItemContextMatcher[Item, R]", "member" : "io.dylemma.spac.SingleItemContextMatcher.and", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#and[A1>:A,B,R](that:io.dylemma.spac.SingleItemContextMatcher[Item,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.SingleItemContextMatcher[Item,R]", "kind" : "def"}, {"label" : "|", "tail" : "(that: SingleItemContextMatcher[Item, A2]): SingleItemContextMatcher[Item, A2]", "member" : "io.dylemma.spac.SingleItemContextMatcher.|", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#|[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: SingleItemContextMatcher[Item, A2]): SingleItemContextMatcher[Item, A2]", "member" : "io.dylemma.spac.SingleItemContextMatcher.or", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#or[A2>:A](that:io.dylemma.spac.SingleItemContextMatcher[Item,A2]):io.dylemma.spac.SingleItemContextMatcher[Item,A2]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): SingleItemContextMatcher[Item, A]", "member" : "io.dylemma.spac.SingleItemContextMatcher.filter", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#filter(p:A=>Boolean):io.dylemma.spac.SingleItemContextMatcher[Item,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Option[B]): SingleItemContextMatcher[Item, B]", "member" : "io.dylemma.spac.SingleItemContextMatcher.flatMap", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#flatMap[B](f:A=>Option[B]):io.dylemma.spac.SingleItemContextMatcher[Item,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): SingleItemContextMatcher[Item, B]", "member" : "io.dylemma.spac.SingleItemContextMatcher.map", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#map[B](f:A=>B):io.dylemma.spac.SingleItemContextMatcher[Item,B]", "kind" : "def"}, {"label" : "applyChained", "tail" : "(stack: IndexedSeq[Item], offset: Int, avail: Int, next: ContextMatcher[Item, B]): Option[(A, B)]", "member" : "io.dylemma.spac.SingleItemContextMatcher.applyChained", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#applyChained[B](stack:scala.collection.IndexedSeq[Item],offset:Int,avail:Int,next:io.dylemma.spac.ContextMatcher[Item,B]):Option[(A,B)]", "kind" : "def"}, {"label" : "|", "tail" : "(that: ContextMatcher[Item, A2]): ContextMatcher[Item, A2]", "member" : "io.dylemma.spac.ContextMatcher.|", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#|[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "or", "tail" : "(that: ContextMatcher[Item, A2]): ContextMatcher[Item, A2]", "member" : "io.dylemma.spac.ContextMatcher.or", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#or[A2>:A](that:io.dylemma.spac.ContextMatcher[Elem,A2]):io.dylemma.spac.ContextMatcher[Elem,A2]", "kind" : "def"}, {"label" : "\\", "tail" : "(next: ContextMatcher[Item, B])(reduce: Aux[A1, B, R]): ContextMatcher[Item, R]", "member" : "io.dylemma.spac.ContextMatcher.\\", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#\\[A1>:A,B,R](next:io.dylemma.spac.ContextMatcher[Elem,B])(implicitreduce:io.dylemma.spac.TypeReduce.Aux[A1,B,R]):io.dylemma.spac.ContextMatcher[Elem,R]", "kind" : "def"}, {"label" : "apply", "tail" : "(stack: IndexedSeq[Item], offset: Int, avail: Int): Option[A]", "member" : "io.dylemma.spac.ContextMatcher.apply", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#apply(stack:scala.collection.IndexedSeq[Elem],offset:Int,avail:Int):Option[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "applyElem", "tail" : "(elem: Item): Option[A]", "member" : "io.dylemma.spac.SingleItemContextMatcher.applyElem", "link" : "io\/dylemma\/spac\/SingleItemContextMatcher.html#applyElem(elem:Item):Option[A]", "kind" : "abstract def"}], "shortDescription" : "Specialization of ContextMatcher which only checks the first element in the stack for matching operations."}, {"name" : "io.dylemma.spac.Source", "object" : "io\/dylemma\/spac\/Source$.html", "members_object" : [{"label" : "fromChain", "tail" : "(chain: Chain[A]): Source[A]", "member" : "io.dylemma.spac.Source.fromChain", "link" : "io\/dylemma\/spac\/Source$.html#fromChain[A](chain:cats.data.Chain[A]):io.dylemma.spac.Source[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(collection: Iterable[A], shouldCloseIterators: Boolean): Source[A]", "member" : "io.dylemma.spac.Source.fromIterable", "link" : "io\/dylemma\/spac\/Source$.html#fromIterable[A](collection:Iterable[A],shouldCloseIterators:Boolean):io.dylemma.spac.Source[A]", "kind" : "def"}, {"label" : "deferOnce", "tail" : "(getUnderlying: => Source[A]): Source[A]", "member" : "io.dylemma.spac.Source.deferOnce", "link" : "io\/dylemma\/spac\/Source$.html#deferOnce[A](getUnderlying:=>io.dylemma.spac.Source[A]):io.dylemma.spac.Source[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(getUnderlying: => Source[A]): Source[A]", "member" : "io.dylemma.spac.Source.defer", "link" : "io\/dylemma\/spac\/Source$.html#defer[A](getUnderlying:=>io.dylemma.spac.Source[A]):io.dylemma.spac.Source[A]", "kind" : "def"}, {"label" : "singleUse", "tail" : "(itr: Iterator[A]): Source[A]", "member" : "io.dylemma.spac.Source.singleUse", "link" : "io\/dylemma\/spac\/Source$.html#singleUse[A](itr:Iterator[A]):io.dylemma.spac.Source[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Source$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Source$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Source$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Source$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Source$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Source$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Source$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Source$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Source$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Source$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Source$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Source$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Source$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Source$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Source$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Source$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Source$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Source$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Source$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/Source.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/Source.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/Source.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Source[A]) => Boolean, msg: => Any): Source[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Source.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Source[A]) => Boolean): Source[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Source.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Source[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Source.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Source[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Source.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Source[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/Source.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Source[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/Source.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iterateWith", "tail" : "(f: (Iterator[A]) => B): B", "member" : "io.dylemma.spac.Source.iterateWith", "link" : "io\/dylemma\/spac\/Source.html#iterateWith[B](f:Iterator[A]=>B):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Source.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Source.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Source.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Source.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Source.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Source.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Source.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Source.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Source.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Source.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Source.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Source.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Source.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Source.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Source.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Source.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Source.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Source.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Source.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "open", "tail" : "(): (Iterator[A], () => Unit)", "member" : "io.dylemma.spac.Source.open", "link" : "io\/dylemma\/spac\/Source.html#open():(Iterator[A],()=>Unit)", "kind" : "abstract def"}], "shortDescription" : "A Source[A] is like an Iterable[A] but with a built-in assumption that the iterator may be closeable,intended for use as a convenient argument to a Parser's parse method."}, {"name" : "io.dylemma.spac.SpacException", "shortDescription" : "Base class for all exceptions thrown by Spac parsers.", "object" : "io\/dylemma\/spac\/SpacException$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/SpacException.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/SpacException.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpacException[Self]) => Boolean, msg: => Any): SpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacException.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpacException[Self]) => Boolean): SpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacException.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacException.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SpacException[Self]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacException.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SpacException[Self], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/SpacException.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SpacException[Self], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/SpacException.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "addEarlyTrace", "tail" : "(firstTraceElems: SpacTraceElement*): Self", "member" : "io.dylemma.spac.SpacException.addEarlyTrace", "link" : "io\/dylemma\/spac\/SpacException.html#addEarlyTrace(firstTraceElems:io.dylemma.spac.SpacTraceElement*):Self", "kind" : "def"}, {"label" : "addEarlyTrace", "tail" : "(firstTrace: Chain[SpacTraceElement]): Self", "member" : "io.dylemma.spac.SpacException.addEarlyTrace", "link" : "io\/dylemma\/spac\/SpacException.html#addEarlyTrace(firstTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Self", "kind" : "def"}, {"label" : "addTrace", "tail" : "(nextTraceElems: SpacTraceElement*): Self", "member" : "io.dylemma.spac.SpacException.addTrace", "link" : "io\/dylemma\/spac\/SpacException.html#addTrace(nextTraceElems:io.dylemma.spac.SpacTraceElement*):Self", "kind" : "def"}, {"label" : "addTrace", "tail" : "(nextTrace: Chain[SpacTraceElement]): Self", "member" : "io.dylemma.spac.SpacException.addTrace", "link" : "io\/dylemma\/spac\/SpacException.html#addTrace(nextTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Self", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): SpacException[Self]", "member" : "io.dylemma.spac.SpacException.fillInStackTrace", "link" : "io\/dylemma\/spac\/SpacException.html#fillInStackTrace():io.dylemma.spac.SpacException[Self]", "kind" : "def"}, {"member" : "io.dylemma.spac.SpacException#<init>", "error" : "unsupported entity"}, {"member" : "io.dylemma.spac.SpacException#<init>", "error" : "unsupported entity"}, {"member" : "io.dylemma.spac.SpacException#<init>", "error" : "unsupported entity"}, {"label" : "detail", "tail" : ": Either[String, Throwable]", "member" : "io.dylemma.spac.SpacException.detail", "link" : "io\/dylemma\/spac\/SpacException.html#detail:Either[String,Throwable]", "kind" : "val"}, {"label" : "spacTrace", "tail" : ": Chain[SpacTraceElement]", "member" : "io.dylemma.spac.SpacException.spacTrace", "link" : "io\/dylemma\/spac\/SpacException.html#spacTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/dylemma\/spac\/SpacException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/dylemma\/spac\/SpacException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/dylemma\/spac\/SpacException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/dylemma\/spac\/SpacException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/dylemma\/spac\/SpacException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/dylemma\/spac\/SpacException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/dylemma\/spac\/SpacException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/dylemma\/spac\/SpacException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/dylemma\/spac\/SpacException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/dylemma\/spac\/SpacException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/dylemma\/spac\/SpacException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "io\/dylemma\/spac\/SpacException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SpacException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SpacException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SpacException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SpacException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SpacException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SpacException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SpacException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SpacException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SpacException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SpacException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SpacException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SpacException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SpacException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SpacException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SpacException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withSpacTrace", "tail" : "(spacTrace2: Chain[SpacTraceElement]): Self", "member" : "io.dylemma.spac.SpacException.withSpacTrace", "link" : "io\/dylemma\/spac\/SpacException.html#withSpacTrace(spacTrace2:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Self", "kind" : "abstract def"}], "members_object" : [{"label" : "FallbackChainFailure", "tail" : "", "member" : "io.dylemma.spac.SpacException.FallbackChainFailure", "link" : "io\/dylemma\/spac\/SpacException$.html#FallbackChainFailure", "kind" : "object"}, {"label" : "FallbackChainFailure", "tail" : "", "member" : "io.dylemma.spac.SpacException.FallbackChainFailure", "link" : "io\/dylemma\/spac\/SpacException$.html#FallbackChainFailureextendsSpacException[io.dylemma.spac.SpacException.FallbackChainFailure]", "kind" : "class"}, {"label" : "fallbackChainFailure", "tail" : "(underlyingErrors: List[Throwable]): FallbackChainFailure", "member" : "io.dylemma.spac.SpacException.fallbackChainFailure", "link" : "io\/dylemma\/spac\/SpacException$.html#fallbackChainFailure(underlyingErrors:List[Throwable]):io.dylemma.spac.SpacException.FallbackChainFailure", "kind" : "def"}, {"label" : "UnfulfilledInputsException", "tail" : "", "member" : "io.dylemma.spac.SpacException.UnfulfilledInputsException", "link" : "io\/dylemma\/spac\/SpacException$.html#UnfulfilledInputsException", "kind" : "object"}, {"label" : "UnfulfilledInputsException", "tail" : "", "member" : "io.dylemma.spac.SpacException.UnfulfilledInputsException", "link" : "io\/dylemma\/spac\/SpacException$.html#UnfulfilledInputsExceptionextendsSpacException[io.dylemma.spac.SpacException.UnfulfilledInputsException]", "kind" : "class"}, {"label" : "unfulfilledInputs", "tail" : "(expectations: List[String]): UnfulfilledInputsException", "member" : "io.dylemma.spac.SpacException.unfulfilledInputs", "link" : "io\/dylemma\/spac\/SpacException$.html#unfulfilledInputs(expectations:List[String]):io.dylemma.spac.SpacException.UnfulfilledInputsException", "kind" : "def"}, {"label" : "UnexpectedInputException", "tail" : "", "member" : "io.dylemma.spac.SpacException.UnexpectedInputException", "link" : "io\/dylemma\/spac\/SpacException$.html#UnexpectedInputException", "kind" : "object"}, {"label" : "UnexpectedInputException", "tail" : "", "member" : "io.dylemma.spac.SpacException.UnexpectedInputException", "link" : "io\/dylemma\/spac\/SpacException$.html#UnexpectedInputException[A]extendsSpacException[io.dylemma.spac.SpacException.UnexpectedInputException[A]]", "kind" : "class"}, {"label" : "unexpectedInput", "tail" : "(input: A, expectations: List[String]): UnexpectedInputException[A]", "member" : "io.dylemma.spac.SpacException.unexpectedInput", "link" : "io\/dylemma\/spac\/SpacException$.html#unexpectedInput[A](input:A,expectations:List[String]):io.dylemma.spac.SpacException.UnexpectedInputException[A]", "kind" : "def"}, {"label" : "MissingFirstException", "tail" : "", "member" : "io.dylemma.spac.SpacException.MissingFirstException", "link" : "io\/dylemma\/spac\/SpacException$.html#MissingFirstException[Out]extendsSpacException[io.dylemma.spac.SpacException.MissingFirstException[Out]]", "kind" : "class"}, {"label" : "missingFirst", "tail" : "(arg0: TypeName[Out]): MissingFirstException[Out]", "member" : "io.dylemma.spac.SpacException.missingFirst", "link" : "io\/dylemma\/spac\/SpacException$.html#missingFirst[Out](implicitevidence$1:org.tpolecat.typename.TypeName[Out]):io.dylemma.spac.SpacException.MissingFirstException[Out]", "kind" : "def"}, {"label" : "CaughtError", "tail" : "", "member" : "io.dylemma.spac.SpacException.CaughtError", "link" : "io\/dylemma\/spac\/SpacException$.html#CaughtError", "kind" : "object"}, {"label" : "CaughtError", "tail" : "", "member" : "io.dylemma.spac.SpacException.CaughtError", "link" : "io\/dylemma\/spac\/SpacException$.html#CaughtErrorextendsSpacException[io.dylemma.spac.SpacException.CaughtError]", "kind" : "class"}, {"label" : "addEarlyTrace", "tail" : "(cause: Throwable, firstTrace: SpacTraceElement*): Throwable", "member" : "io.dylemma.spac.SpacException.addEarlyTrace", "link" : "io\/dylemma\/spac\/SpacException$.html#addEarlyTrace(cause:Throwable,firstTrace:io.dylemma.spac.SpacTraceElement*):Throwable", "kind" : "def"}, {"label" : "addEarlyTrace", "tail" : "(cause: Throwable, firstTrace: Chain[SpacTraceElement]): Throwable", "member" : "io.dylemma.spac.SpacException.addEarlyTrace", "link" : "io\/dylemma\/spac\/SpacException$.html#addEarlyTrace(cause:Throwable,firstTrace:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Throwable", "kind" : "def"}, {"label" : "addTrace", "tail" : "(cause: Throwable, nextTraceElems: SpacTraceElement*): Throwable", "member" : "io.dylemma.spac.SpacException.addTrace", "link" : "io\/dylemma\/spac\/SpacException$.html#addTrace(cause:Throwable,nextTraceElems:io.dylemma.spac.SpacTraceElement*):Throwable", "kind" : "def"}, {"label" : "addTrace", "tail" : "(cause: Throwable, nextTraceElems: Chain[SpacTraceElement]): Throwable", "member" : "io.dylemma.spac.SpacException.addTrace", "link" : "io\/dylemma\/spac\/SpacException$.html#addTrace(cause:Throwable,nextTraceElems:cats.data.Chain[io.dylemma.spac.SpacTraceElement]):Throwable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SpacException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SpacException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SpacException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SpacException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SpacException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SpacException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SpacException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SpacException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SpacException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/SpacException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SpacException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SpacException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SpacException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SpacException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SpacException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SpacException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/SpacException.html", "kind" : "class"}, {"name" : "io.dylemma.spac.SpacTraceElement", "object" : "io\/dylemma\/spac\/SpacTraceElement$.html", "members_object" : [{"label" : "InCompound", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.InCompound", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#InCompoundextendsSpacTraceElementwithProductwithSerializable", "kind" : "case class"}, {"label" : "InInputContext", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.InInputContext", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#InInputContext[A]extendsSpacTraceElementwithProductwithSerializable", "kind" : "case class"}, {"label" : "NearLocation", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.NearLocation", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#NearLocationextendsSpacTraceElementwithProductwithSerializable", "kind" : "case class"}, {"label" : "AtInputEnd", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.AtInputEnd", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#AtInputEnd", "kind" : "object"}, {"label" : "InInput", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.InInput", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#InInput[A]extendsSpacTraceElementwithProductwithSerializable", "kind" : "case class"}, {"label" : "InSplitter", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.InSplitter", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#InSplitterextendsSpacTraceElementwithProductwithSerializable", "kind" : "case class"}, {"label" : "InParse", "tail" : "", "member" : "io.dylemma.spac.SpacTraceElement.InParse", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#InParseextendsSpacTraceElementwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SpacTraceElement$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/SpacTraceElement.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpacTraceElement) => Boolean, msg: => Any): SpacTraceElement", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpacTraceElement) => Boolean): SpacTraceElement", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SpacTraceElement", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SpacTraceElement", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SpacTraceElement, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SpacTraceElement, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "truncateNote", "tail" : "(note: String, maxLen: Int): String", "member" : "io.dylemma.spac.SpacTraceElement.truncateNote", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#truncateNote(note:String,maxLen:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SpacTraceElement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toStackTraceElement", "tail" : "(): StackTraceElement", "member" : "io.dylemma.spac.SpacTraceElement.toStackTraceElement", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#toStackTraceElement:StackTraceElement", "kind" : "abstract def"}, {"label" : "render", "tail" : "(): String", "member" : "io.dylemma.spac.SpacTraceElement.render", "link" : "io\/dylemma\/spac\/SpacTraceElement.html#render:String", "kind" : "abstract def"}], "shortDescription" : "A play on words vs StackTraceElement, a *Spac* trace element represents some contextual location inside the logic of a spac Parser,or the location of an input to that parser."}, {"name" : "io.dylemma.spac.Splitter", "object" : "io\/dylemma\/spac\/Splitter$.html", "members_object" : [{"label" : "consecutiveMatches", "tail" : "(p: (In) => Boolean): Splitter[In, Any]", "member" : "io.dylemma.spac.Splitter.consecutiveMatches", "link" : "io\/dylemma\/spac\/Splitter$.html#consecutiveMatches[In](p:In=>Boolean):io.dylemma.spac.Splitter[In,Any]", "kind" : "def"}, {"label" : "consecutiveMatches", "tail" : "(matcher: PartialFunction[In, Context]): Splitter[In, Context]", "member" : "io.dylemma.spac.Splitter.consecutiveMatches", "link" : "io\/dylemma\/spac\/Splitter$.html#consecutiveMatches[In,Context](matcher:PartialFunction[In,Context]):io.dylemma.spac.Splitter[In,Context]", "kind" : "def"}, {"label" : "splitOnMatch", "tail" : "(f: (In) => Boolean): Splitter[In, Any]", "member" : "io.dylemma.spac.Splitter.splitOnMatch", "link" : "io\/dylemma\/spac\/Splitter$.html#splitOnMatch[In](f:In=>Boolean):io.dylemma.spac.Splitter[In,Any]", "kind" : "def"}, {"label" : "splitOnMatch", "tail" : "(matcher: PartialFunction[In, C]): Splitter[In, C]", "member" : "io.dylemma.spac.Splitter.splitOnMatch", "link" : "io\/dylemma\/spac\/Splitter$.html#splitOnMatch[In,C](matcher:PartialFunction[In,C]):io.dylemma.spac.Splitter[In,C]", "kind" : "def"}, {"label" : "fromMatcher", "tail" : "(matcher: ContextMatcher[Elem, C])(S: StackLike[In, Elem], pos: CallerPos): Splitter[In, C]", "member" : "io.dylemma.spac.Splitter.fromMatcher", "link" : "io\/dylemma\/spac\/Splitter$.html#fromMatcher[In,Elem,C](matcher:io.dylemma.spac.ContextMatcher[Elem,C])(implicitS:io.dylemma.spac.StackLike[In,Elem],implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.Splitter[In,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(): SplitterApplyWithBoundInput[In]", "member" : "io.dylemma.spac.Splitter.apply", "link" : "io\/dylemma\/spac\/Splitter$.html#apply[In]:io.dylemma.spac.SplitterApplyWithBoundInput[In]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Splitter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Splitter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Splitter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Splitter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Splitter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Splitter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Splitter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Splitter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Splitter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Splitter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Splitter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Splitter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Splitter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Splitter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Splitter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Splitter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Splitter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Splitter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Splitter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/Splitter.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/Splitter.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/Splitter.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Splitter[In, C]) => Boolean, msg: => Any): Splitter[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Splitter.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Splitter[In, C]) => Boolean): Splitter[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Splitter.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Splitter[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Splitter.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Splitter[In, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Splitter.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Splitter[In, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/Splitter.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Splitter[In, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/Splitter.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "flatMap", "tail" : "(transformMatches: (ContextPush[In, C]) => Transformer[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Splitter.flatMap", "link" : "io\/dylemma\/spac\/Splitter.html#flatMap[Out](transformMatches:io.dylemma.spac.ContextPush[In,C]=>io.dylemma.spac.Transformer[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "as", "tail" : "(parser: Parser[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Splitter.as", "link" : "io\/dylemma\/spac\/Splitter.html#as[Out](implicitparser:io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "joinBy", "tail" : "(parser: Parser[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Splitter.joinBy", "link" : "io\/dylemma\/spac\/Splitter.html#joinBy[Out](parser:io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "mapTraced", "tail" : "(parseMatches: (ContextPush[In, C]) => Parser[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Splitter.mapTraced", "link" : "io\/dylemma\/spac\/Splitter.html#mapTraced[Out](parseMatches:io.dylemma.spac.ContextPush[In,C]=>io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "map", "tail" : "(parseMatches: (C) => Parser[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Splitter.map", "link" : "io\/dylemma\/spac\/Splitter.html#map[Out](parseMatches:C=>io.dylemma.spac.Parser[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Splitter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Splitter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Splitter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Splitter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Splitter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Splitter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Splitter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Splitter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Splitter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Splitter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Splitter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Splitter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Splitter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Splitter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Splitter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Splitter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Splitter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Splitter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Splitter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "addBoundaries", "tail" : "(): Transformer[In, Either[ContextChange[In, C], In]]", "member" : "io.dylemma.spac.Splitter.addBoundaries", "link" : "io\/dylemma\/spac\/Splitter.html#addBoundaries:io.dylemma.spac.Transformer[In,Either[io.dylemma.spac.ContextChange[In,C],In]]", "kind" : "abstract def"}], "shortDescription" : "Primary \"spac\" abstraction that acts as a selector for sub-streams within a single input stream."}, {"name" : "io.dylemma.spac.SplitterApplyWithBoundInput", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SplitterApplyWithBoundInput[In]) => Boolean, msg: => Any): SplitterApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SplitterApplyWithBoundInput[In]) => Boolean): SplitterApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SplitterApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SplitterApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SplitterApplyWithBoundInput[In], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SplitterApplyWithBoundInput[In], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "consecutiveMatches", "tail" : "(p: (In) => Boolean): Splitter[In, Any]", "member" : "io.dylemma.spac.SplitterApplyWithBoundInput.consecutiveMatches", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#consecutiveMatches(p:In=>Boolean):io.dylemma.spac.Splitter[In,Any]", "kind" : "def"}, {"label" : "consecutiveMatches", "tail" : "(matcher: PartialFunction[In, Context]): Splitter[In, Context]", "member" : "io.dylemma.spac.SplitterApplyWithBoundInput.consecutiveMatches", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#consecutiveMatches[Context](matcher:PartialFunction[In,Context]):io.dylemma.spac.Splitter[In,Context]", "kind" : "def"}, {"label" : "splitOnMatch", "tail" : "(f: (In) => Boolean): Splitter[In, Any]", "member" : "io.dylemma.spac.SplitterApplyWithBoundInput.splitOnMatch", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#splitOnMatch(f:In=>Boolean):io.dylemma.spac.Splitter[In,Any]", "kind" : "def"}, {"label" : "splitOnMatch", "tail" : "(matcher: PartialFunction[In, C]): Splitter[In, C]", "member" : "io.dylemma.spac.SplitterApplyWithBoundInput.splitOnMatch", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#splitOnMatch[C](matcher:PartialFunction[In,C]):io.dylemma.spac.Splitter[In,C]", "kind" : "def"}, {"label" : "fromMatcher", "tail" : "(matcher: ContextMatcher[Elem, C])(S: StackLike[In, Elem], pos: CallerPos): Splitter[In, C]", "member" : "io.dylemma.spac.SplitterApplyWithBoundInput.fromMatcher", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#fromMatcher[Elem,C](matcher:io.dylemma.spac.ContextMatcher[Elem,C])(implicitS:io.dylemma.spac.StackLike[In,Elem],implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.Splitter[In,C]", "kind" : "def"}, {"member" : "io.dylemma.spac.SplitterApplyWithBoundInput#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/SplitterApplyWithBoundInput.html", "kind" : "class"}, {"name" : "io.dylemma.spac.StackInterpretation", "object" : "io\/dylemma\/spac\/StackInterpretation$.html", "members_object" : [{"label" : "AnyChange", "tail" : "", "member" : "io.dylemma.spac.StackInterpretation.AnyChange", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#AnyChange", "kind" : "object"}, {"label" : "ChangedBeforeInput", "tail" : "", "member" : "io.dylemma.spac.StackInterpretation.ChangedBeforeInput", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#ChangedBeforeInput[In,Elem]extendsStackInterpretation[In,Elem]withProductwithSerializable", "kind" : "case class"}, {"label" : "ChangedAfterInput", "tail" : "", "member" : "io.dylemma.spac.StackInterpretation.ChangedAfterInput", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#ChangedAfterInput[In,Elem]extendsStackInterpretation[In,Elem]withProductwithSerializable", "kind" : "case class"}, {"label" : "NoChange", "tail" : "", "member" : "io.dylemma.spac.StackInterpretation.NoChange", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#NoChange", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/StackInterpretation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/StackInterpretation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/StackInterpretation.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/StackInterpretation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/StackInterpretation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StackInterpretation[In, Elem]) => Boolean, msg: => Any): StackInterpretation[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackInterpretation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StackInterpretation[In, Elem]) => Boolean): StackInterpretation[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackInterpretation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): StackInterpretation[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackInterpretation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StackInterpretation[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackInterpretation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StackInterpretation[In, Elem], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/StackInterpretation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StackInterpretation[In, Elem], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/StackInterpretation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/StackInterpretation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/StackInterpretation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/StackInterpretation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/StackInterpretation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/StackInterpretation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/StackInterpretation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/StackInterpretation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackInterpretation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackInterpretation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackInterpretation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/StackInterpretation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/StackInterpretation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/StackInterpretation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/StackInterpretation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/StackInterpretation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/StackInterpretation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/StackInterpretation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/StackInterpretation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/StackInterpretation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Outcome of a StackLike[In, Elem], indicating whether a given input was a stack push\/pop,and whether that push\/pop should be treated as happening before or after the input that caused it."}, {"name" : "io.dylemma.spac.StackLike", "trait" : "io\/dylemma\/spac\/StackLike.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/StackLike.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/StackLike.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StackLike[In, Elem]) => Boolean, msg: => Any): StackLike[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackLike.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StackLike[In, Elem]) => Boolean): StackLike[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackLike.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): StackLike[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackLike.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StackLike[In, Elem]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/StackLike.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StackLike[In, Elem], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/StackLike.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StackLike[In, Elem], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/StackLike.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "interpret", "tail" : "(): Transformer[In, Either[ContextChange[In, Elem], In]]", "member" : "io.dylemma.spac.StackLike.interpret", "link" : "io\/dylemma\/spac\/StackLike.html#interpret:io.dylemma.spac.Transformer[In,Either[io.dylemma.spac.ContextChange[In,Elem],In]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/StackLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/StackLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/StackLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/StackLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/StackLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/StackLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/StackLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/StackLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/StackLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/StackLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/StackLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/StackLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/StackLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/StackLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/StackLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/StackLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/StackLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "interpretOne", "tail" : "(input: In): StackInterpretation[In, Elem]", "member" : "io.dylemma.spac.StackLike.interpretOne", "link" : "io\/dylemma\/spac\/StackLike.html#interpretOne(input:In):io.dylemma.spac.StackInterpretation[In,Elem]", "kind" : "abstract def"}], "shortDescription" : "Typeclass that perceives a subset of In values as either \"stack push\" or \"stack pop\" events."}, {"name" : "io.dylemma.spac.Transformer", "object" : "io\/dylemma\/spac\/Transformer$.html", "members_object" : [{"label" : "spacFrame", "tail" : "(elems: SpacTraceElement*): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.spacFrame", "link" : "io\/dylemma\/spac\/Transformer$.html#spacFrame[In](elems:io.dylemma.spac.SpacTraceElement*):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (In) => Unit): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.tap", "link" : "io\/dylemma\/spac\/Transformer$.html#tap[In](f:In=>Unit):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(f: (In) => Boolean): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.takeWhile", "link" : "io\/dylemma\/spac\/Transformer$.html#takeWhile[In](f:In=>Boolean):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.take", "link" : "io\/dylemma\/spac\/Transformer$.html#take[In](n:Int):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(f: (In) => Boolean): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.dropWhile", "link" : "io\/dylemma\/spac\/Transformer$.html#dropWhile[In](f:In=>Boolean):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.drop", "link" : "io\/dylemma\/spac\/Transformer$.html#drop[In](n:Int):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Transformer.collect", "link" : "io\/dylemma\/spac\/Transformer$.html#collect[In,Out](pf:PartialFunction[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (In) => Boolean): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.filter", "link" : "io\/dylemma\/spac\/Transformer$.html#filter[In](f:In=>Boolean):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "mapFlatten", "tail" : "(f: (In) => Iterable[Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.Transformer.mapFlatten", "link" : "io\/dylemma\/spac\/Transformer$.html#mapFlatten[In,Out](f:In=>Iterable[Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (In) => Out): Transformer[In, Out]", "member" : "io.dylemma.spac.Transformer.map", "link" : "io\/dylemma\/spac\/Transformer$.html#map[In,Out](f:In=>Out):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "identity", "tail" : "(): Transformer[In, In]", "member" : "io.dylemma.spac.Transformer.identity", "link" : "io\/dylemma\/spac\/Transformer$.html#identity[In]:io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "apply", "tail" : "(): TransformerApplyWithBoundInput[In]", "member" : "io.dylemma.spac.Transformer.apply", "link" : "io\/dylemma\/spac\/Transformer$.html#apply[In]:io.dylemma.spac.TransformerApplyWithBoundInput[In]", "kind" : "def"}, {"label" : "HandlerLinkage", "tail" : "", "member" : "io.dylemma.spac.Transformer.HandlerLinkage", "link" : "io\/dylemma\/spac\/Transformer$.html#HandlerLinkage[+Out]extendsAnyRef", "kind" : "trait"}, {"label" : "BoundHandler", "tail" : "", "member" : "io.dylemma.spac.Transformer.BoundHandler", "link" : "io\/dylemma\/spac\/Transformer$.html#BoundHandler", "kind" : "object"}, {"label" : "BoundHandler", "tail" : "", "member" : "io.dylemma.spac.Transformer.BoundHandler", "link" : "io\/dylemma\/spac\/Transformer$.html#BoundHandler[-In]extendsTransformer.HandlerWrite[In]", "kind" : "trait"}, {"label" : "HandlerWrite", "tail" : "", "member" : "io.dylemma.spac.Transformer.HandlerWrite", "link" : "io\/dylemma\/spac\/Transformer$.html#HandlerWrite[-Out]extendsAnyRef", "kind" : "trait"}, {"label" : "Handler", "tail" : "", "member" : "io.dylemma.spac.Transformer.Handler", "link" : "io\/dylemma\/spac\/Transformer$.html#Handler", "kind" : "object"}, {"label" : "Handler", "tail" : "", "member" : "io.dylemma.spac.Transformer.Handler", "link" : "io\/dylemma\/spac\/Transformer$.html#Handler[-In,+Out]extendsAnyRef", "kind" : "trait"}, {"label" : "Stateless", "tail" : "", "member" : "io.dylemma.spac.Transformer.Stateless", "link" : "io\/dylemma\/spac\/Transformer$.html#Stateless[-In,+Out]extendsTransformer[In,Out]withTransformer.Handler[In,Out]", "kind" : "trait"}, {"label" : "TransformerKVParsingOps", "tail" : "", "member" : "io.dylemma.spac.Transformer.TransformerKVParsingOps", "link" : "io\/dylemma\/spac\/Transformer$.html#TransformerKVParsingOps[In,K,V]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TransformerParsingOps", "tail" : "", "member" : "io.dylemma.spac.Transformer.TransformerParsingOps", "link" : "io\/dylemma\/spac\/Transformer$.html#TransformerParsingOps[In,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Transformer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Transformer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Transformer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Transformer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Transformer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Transformer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Transformer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Transformer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Transformer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Transformer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Transformer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Transformer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Transformer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Transformer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Transformer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Transformer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Transformer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Transformer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Transformer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/Transformer.html", "kind" : "trait", "members_trait" : [{"label" : "parseToMap", "tail" : "(): Parser[In, Map[K, V]]", "member" : "io.dylemma.spac.Transformer.TransformerKVParsingOps.parseToMap", "link" : "io\/dylemma\/spac\/Transformer.html#parseToMap:io.dylemma.spac.Parser[In,Map[K,V]]", "kind" : "def"}, {"label" : "parseFirst", "tail" : "(A: TypeName[Out]): Parser[In, Out]", "member" : "io.dylemma.spac.Transformer.TransformerParsingOps.parseFirst", "link" : "io\/dylemma\/spac\/Transformer.html#parseFirst(implicitA:org.tpolecat.typename.TypeName[A]):io.dylemma.spac.Parser[In,A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/Transformer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/Transformer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Transformer[In, Out]) => Boolean, msg: => Any): Transformer[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Transformer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Transformer[In, Out]) => Boolean): Transformer[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Transformer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Transformer[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Transformer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Transformer[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Transformer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Transformer[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/Transformer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Transformer[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/Transformer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "transform", "tail" : "(source: Source[In])(pos: CallerPos): Source[Out]", "member" : "io.dylemma.spac.Transformer.transform", "link" : "io\/dylemma\/spac\/Transformer.html#transform(source:io.dylemma.spac.Source[In])(implicitpos:io.dylemma.spac.CallerPos):io.dylemma.spac.Source[Out]", "kind" : "def"}, {"label" : "transform", "tail" : "(itr: Iterator[In])(pos: CallerPos): Iterator[Out]", "member" : "io.dylemma.spac.Transformer.transform", "link" : "io\/dylemma\/spac\/Transformer.html#transform(itr:Iterator[In])(implicitpos:io.dylemma.spac.CallerPos):Iterator[Out]", "kind" : "def"}, {"label" : "sink", "tail" : "(): Parser[In, Unit]", "member" : "io.dylemma.spac.Transformer.sink", "link" : "io\/dylemma\/spac\/Transformer.html#sink:io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "drain", "tail" : "(): Parser[In, Unit]", "member" : "io.dylemma.spac.Transformer.drain", "link" : "io\/dylemma\/spac\/Transformer.html#drain:io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "parseForeach", "tail" : "(f: (Out) => Any): Parser[In, Unit]", "member" : "io.dylemma.spac.Transformer.parseForeach", "link" : "io\/dylemma\/spac\/Transformer.html#parseForeach(f:Out=>Any):io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "parseTap", "tail" : "(f: (Out) => Unit): Parser[In, Unit]", "member" : "io.dylemma.spac.Transformer.parseTap", "link" : "io\/dylemma\/spac\/Transformer.html#parseTap(f:Out=>Unit):io.dylemma.spac.Parser[In,Unit]", "kind" : "def"}, {"label" : "parseAsFold", "tail" : "(init: Out2)(f: (Out2, Out) => Out2): Parser[In, Out2]", "member" : "io.dylemma.spac.Transformer.parseAsFold", "link" : "io\/dylemma\/spac\/Transformer.html#parseAsFold[Out2](init:Out2)(f:(Out2,Out)=>Out2):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : "parseFirstOption", "tail" : "(): Parser[In, Option[Out]]", "member" : "io.dylemma.spac.Transformer.parseFirstOption", "link" : "io\/dylemma\/spac\/Transformer.html#parseFirstOption:io.dylemma.spac.Parser[In,Option[Out]]", "kind" : "def"}, {"label" : "parseFirstOpt", "tail" : "(): Parser[In, Option[Out]]", "member" : "io.dylemma.spac.Transformer.parseFirstOpt", "link" : "io\/dylemma\/spac\/Transformer.html#parseFirstOpt:io.dylemma.spac.Parser[In,Option[Out]]", "kind" : "def"}, {"label" : "parseToList", "tail" : "(): Parser[In, List[Out]]", "member" : "io.dylemma.spac.Transformer.parseToList", "link" : "io\/dylemma\/spac\/Transformer.html#parseToList:io.dylemma.spac.Parser[In,List[Out]]", "kind" : "def"}, {"label" : "parseWith", "tail" : "(parser: Parser[Out, Out2], setDebugName: Option[String]): Parser[In, Out2]", "member" : "io.dylemma.spac.Transformer.parseWith", "link" : "io\/dylemma\/spac\/Transformer.html#parseWith[Out2](parser:io.dylemma.spac.Parser[Out,Out2],setDebugName:Option[String]):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : ">>", "tail" : "(parser: Parser[Out, Out2]): Parser[In, Out2]", "member" : "io.dylemma.spac.Transformer.>>", "link" : "io\/dylemma\/spac\/Transformer.html#>>[Out2](parser:io.dylemma.spac.Parser[Out,Out2]):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : "parseWith", "tail" : "(parser: Parser[Out, Out2]): Parser[In, Out2]", "member" : "io.dylemma.spac.Transformer.parseWith", "link" : "io\/dylemma\/spac\/Transformer.html#parseWith[Out2](parser:io.dylemma.spac.Parser[Out,Out2]):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : "into", "tail" : "(parser: Parser[Out, Out2]): Parser[In, Out2]", "member" : "io.dylemma.spac.Transformer.into", "link" : "io\/dylemma\/spac\/Transformer.html#into[Out2](parser:io.dylemma.spac.Parser[Out,Out2]):io.dylemma.spac.Parser[In,Out2]", "kind" : "def"}, {"label" : ">>", "tail" : "(next: Transformer[Out, Out2]): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.>>", "link" : "io\/dylemma\/spac\/Transformer.html#>>[Out2](next:io.dylemma.spac.Transformer[Out,Out2]):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "andThen", "tail" : "(next: Transformer[Out, Out2]): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.andThen", "link" : "io\/dylemma\/spac\/Transformer.html#andThen[Out2](next:io.dylemma.spac.Transformer[Out,Out2]):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "through", "tail" : "(next: Transformer[Out, Out2]): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.through", "link" : "io\/dylemma\/spac\/Transformer.html#through[Out2](next:io.dylemma.spac.Transformer[Out,Out2]):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "cast", "tail" : "(ev: <:<[Out, Out2]): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.cast", "link" : "io\/dylemma\/spac\/Transformer.html#cast[Out2](implicitev:Out<:<Out2):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "upcast", "tail" : "(): Transformer[In2, Out2]", "member" : "io.dylemma.spac.Transformer.upcast", "link" : "io\/dylemma\/spac\/Transformer.html#upcast[In2<:In,Out2>:Out]:io.dylemma.spac.Transformer[In2,Out2]", "kind" : "def"}, {"label" : "parallel", "tail" : "(that: Transformer[In2, Out2]): Transformer[In2, Out2]", "member" : "io.dylemma.spac.Transformer.parallel", "link" : "io\/dylemma\/spac\/Transformer.html#parallel[In2<:In,Out2>:Out](that:io.dylemma.spac.Transformer[In2,Out2]):io.dylemma.spac.Transformer[In2,Out2]", "kind" : "def"}, {"label" : "merge", "tail" : "(that: Transformer[In2, Out2]): Transformer[In2, Out2]", "member" : "io.dylemma.spac.Transformer.merge", "link" : "io\/dylemma\/spac\/Transformer.html#merge[In2<:In,Out2>:Out](that:io.dylemma.spac.Transformer[In2,Out2]):io.dylemma.spac.Transformer[In2,Out2]", "kind" : "def"}, {"label" : "parallelEither", "tail" : "(right: Transformer[In2, Out2]): Transformer[In2, Either[Out, Out2]]", "member" : "io.dylemma.spac.Transformer.parallelEither", "link" : "io\/dylemma\/spac\/Transformer.html#parallelEither[In2<:In,Out2](right:io.dylemma.spac.Transformer[In2,Out2]):io.dylemma.spac.Transformer[In2,Either[Out,Out2]]", "kind" : "def"}, {"label" : "mergeEither", "tail" : "(right: Transformer[In2, Out2]): Transformer[In2, Either[Out, Out2]]", "member" : "io.dylemma.spac.Transformer.mergeEither", "link" : "io\/dylemma\/spac\/Transformer.html#mergeEither[In2<:In,Out2](right:io.dylemma.spac.Transformer[In2,Out2]):io.dylemma.spac.Transformer[In2,Either[Out,Out2]]", "kind" : "def"}, {"label" : "scan", "tail" : "(init: Out2)(op: (Out2, Out) => Out2): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.scan", "link" : "io\/dylemma\/spac\/Transformer.html#scan[Out2](init:Out2)(op:(Out2,Out)=>Out2):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Out, Out2]): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.collect", "link" : "io\/dylemma\/spac\/Transformer.html#collect[Out2](pf:PartialFunction[Out,Out2]):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(predicate: (Out) => Boolean): Transformer[In, Out]", "member" : "io.dylemma.spac.Transformer.withFilter", "link" : "io\/dylemma\/spac\/Transformer.html#withFilter(predicate:Out=>Boolean):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "filter", "tail" : "(predicate: (Out) => Boolean): Transformer[In, Out]", "member" : "io.dylemma.spac.Transformer.filter", "link" : "io\/dylemma\/spac\/Transformer.html#filter(predicate:Out=>Boolean):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "mapFlatten", "tail" : "(f: (Out) => Iterable[Out2]): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.mapFlatten", "link" : "io\/dylemma\/spac\/Transformer.html#mapFlatten[Out2](f:Out=>Iterable[Out2]):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Out) => Out2): Transformer[In, Out2]", "member" : "io.dylemma.spac.Transformer.map", "link" : "io\/dylemma\/spac\/Transformer.html#map[Out2](f:Out=>Out2):io.dylemma.spac.Transformer[In,Out2]", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): Transformer[In, Out]", "member" : "io.dylemma.spac.Transformer.withName", "link" : "io\/dylemma\/spac\/Transformer.html#withName(name:String):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Transformer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Transformer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Transformer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Transformer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Transformer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Transformer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Transformer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Transformer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Transformer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Transformer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Transformer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Transformer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Transformer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Transformer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Transformer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Transformer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Transformer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Transformer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Transformer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "newHandler", "tail" : "(): Handler[In, Out]", "member" : "io.dylemma.spac.Transformer.newHandler", "link" : "io\/dylemma\/spac\/Transformer.html#newHandler:io.dylemma.spac.Transformer.Handler[In,Out]", "kind" : "abstract def"}], "shortDescription" : "Primary \"spac\" abstraction which represents a transformation stage for a stream of data events"}, {"name" : "io.dylemma.spac.TransformerApplyWithBoundInput", "shortDescription" : "Convenience version of the Transformer companion object,which provides transformer constructors with the In type already specified.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TransformerApplyWithBoundInput[In]) => Boolean, msg: => Any): TransformerApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TransformerApplyWithBoundInput[In]) => Boolean): TransformerApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TransformerApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TransformerApplyWithBoundInput[In]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TransformerApplyWithBoundInput[In], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TransformerApplyWithBoundInput[In], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "spacFrame", "tail" : "(elems: SpacTraceElement*): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.spacFrame", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#spacFrame(elems:io.dylemma.spac.SpacTraceElement*):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (In) => Unit): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.tap", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#tap(f:In=>Unit):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(f: (In) => Boolean): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.takeWhile", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#takeWhile(f:In=>Boolean):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.take", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#take(n:Int):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(f: (In) => Boolean): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.dropWhile", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#dropWhile(f:In=>Boolean):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.drop", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#drop(n:Int):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[In, Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.collect", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#collect[Out](pf:PartialFunction[In,Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (In) => Boolean): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.filter", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#filter(f:In=>Boolean):io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"label" : "mapFlatten", "tail" : "(f: (In) => Iterable[Out]): Transformer[In, Out]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.mapFlatten", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#mapFlatten[Out](f:In=>Iterable[Out]):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (In) => Out): Transformer[In, Out]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.map", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#map[Out](f:In=>Out):io.dylemma.spac.Transformer[In,Out]", "kind" : "def"}, {"label" : "identity", "tail" : "(): Transformer[In, In]", "member" : "io.dylemma.spac.TransformerApplyWithBoundInput.identity", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#identity:io.dylemma.spac.Transformer[In,In]", "kind" : "def"}, {"member" : "io.dylemma.spac.TransformerApplyWithBoundInput#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/TransformerApplyWithBoundInput.html", "kind" : "class"}, {"name" : "io.dylemma.spac.TypeReduce", "object" : "io\/dylemma\/spac\/TypeReduce$.html", "members_object" : [{"label" : "flattenRightUnit", "tail" : "(): Aux[T, Unit, T]", "member" : "io.dylemma.spac.TypeReduce.flattenRightUnit", "link" : "io\/dylemma\/spac\/TypeReduce$.html#flattenRightUnit[T]:io.dylemma.spac.TypeReduce.Aux[T,Unit,T]", "kind" : "implicit def"}, {"label" : "flattenLeftUnit", "tail" : "(): Aux[Unit, T, T]", "member" : "io.dylemma.spac.TypeReduce.flattenLeftUnit", "link" : "io\/dylemma\/spac\/TypeReduce$.html#flattenLeftUnit[T]:io.dylemma.spac.TypeReduce.Aux[Unit,T,T]", "kind" : "implicit def"}, {"label" : "flattenTwoUnits", "tail" : ": Aux[Unit, Unit, Unit]", "member" : "io.dylemma.spac.TypeReduce.flattenTwoUnits", "link" : "io\/dylemma\/spac\/TypeReduce$.html#flattenTwoUnits:io.dylemma.spac.TypeReduce.Aux[Unit,Unit,Unit]", "kind" : "implicit val"}, {"label" : "Aux", "tail" : "", "member" : "io.dylemma.spac.TypeReduce.Aux", "link" : "io\/dylemma\/spac\/TypeReduce$.html#Aux[In1,In2,O2]=io.dylemma.spac.TypeReduce[In1,In2]{typeOut=O2}", "kind" : "type"}, {"label" : "noopFlatten", "tail" : "(): Aux[L, R, (L, R)]", "member" : "io.dylemma.spac.LowPriorityTypeReduceImplicits.noopFlatten", "link" : "io\/dylemma\/spac\/TypeReduce$.html#noopFlatten[L,R]:io.dylemma.spac.TypeReduce.Aux[L,R,(L,R)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/TypeReduce$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/TypeReduce$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/TypeReduce$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/TypeReduce$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/TypeReduce$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/TypeReduce$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/TypeReduce$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TypeReduce$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TypeReduce$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TypeReduce$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/TypeReduce$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/TypeReduce$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/TypeReduce$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/TypeReduce$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/TypeReduce$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/TypeReduce$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/TypeReduce$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/TypeReduce$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/TypeReduce$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/TypeReduce.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/TypeReduce.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/TypeReduce.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeReduce[In1, In2]) => Boolean, msg: => Any): TypeReduce[In1, In2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TypeReduce.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeReduce[In1, In2]) => Boolean): TypeReduce[In1, In2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TypeReduce.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TypeReduce[In1, In2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TypeReduce.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypeReduce[In1, In2]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/TypeReduce.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypeReduce[In1, In2], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/TypeReduce.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypeReduce[In1, In2], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/TypeReduce.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/TypeReduce.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/TypeReduce.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/TypeReduce.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/TypeReduce.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/TypeReduce.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/TypeReduce.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/TypeReduce.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TypeReduce.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TypeReduce.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/TypeReduce.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/TypeReduce.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/TypeReduce.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/TypeReduce.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/TypeReduce.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/TypeReduce.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/TypeReduce.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/TypeReduce.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/TypeReduce.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/TypeReduce.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(in1: In1, in2: In2): Out", "member" : "io.dylemma.spac.TypeReduce.apply", "link" : "io\/dylemma\/spac\/TypeReduce.html#apply(in1:In1,in2:In2):TypeReduce.this.Out", "kind" : "abstract def"}, {"member" : "io.dylemma.spac.TypeReduce.Out", "error" : "unsupported entity"}], "shortDescription" : "Type-level tuple reduction function that treats Unit as an Identity."}, {"name" : "io.dylemma.spac.Unconsable", "object" : "io\/dylemma\/spac\/Unconsable$.html", "members_object" : [{"label" : "scalaListUnconsable", "tail" : ": Unconsable[List]", "member" : "io.dylemma.spac.Unconsable.scalaListUnconsable", "link" : "io\/dylemma\/spac\/Unconsable$.html#scalaListUnconsable:io.dylemma.spac.Unconsable[List]", "kind" : "implicit val"}, {"label" : "catsDataChainUnconsable", "tail" : ": Unconsable[Chain]", "member" : "io.dylemma.spac.Unconsable.catsDataChainUnconsable", "link" : "io\/dylemma\/spac\/Unconsable$.html#catsDataChainUnconsable:io.dylemma.spac.Unconsable[cats.data.Chain]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(C: Unconsable[C]): Unconsable[C]", "member" : "io.dylemma.spac.Unconsable.apply", "link" : "io\/dylemma\/spac\/Unconsable$.html#apply[C[_]](implicitC:io.dylemma.spac.Unconsable[C]):io.dylemma.spac.Unconsable[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Unconsable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Unconsable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Unconsable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Unconsable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Unconsable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Unconsable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Unconsable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Unconsable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Unconsable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Unconsable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Unconsable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Unconsable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Unconsable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Unconsable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Unconsable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Unconsable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Unconsable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Unconsable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Unconsable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/dylemma\/spac\/Unconsable.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/Unconsable.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/Unconsable.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Unconsable[C]) => Boolean, msg: => Any): Unconsable[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Unconsable.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Unconsable[C]) => Boolean): Unconsable[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Unconsable.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Unconsable[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Unconsable.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Unconsable[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/Unconsable.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Unconsable[C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/Unconsable.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Unconsable[C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/Unconsable.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/dylemma\/spac\/Unconsable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/dylemma\/spac\/Unconsable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/dylemma\/spac\/Unconsable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/dylemma\/spac\/Unconsable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/dylemma\/spac\/Unconsable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/dylemma\/spac\/Unconsable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/dylemma\/spac\/Unconsable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Unconsable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Unconsable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/dylemma\/spac\/Unconsable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/dylemma\/spac\/Unconsable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/dylemma\/spac\/Unconsable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/dylemma\/spac\/Unconsable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/dylemma\/spac\/Unconsable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/dylemma\/spac\/Unconsable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/dylemma\/spac\/Unconsable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/dylemma\/spac\/Unconsable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/Unconsable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/Unconsable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "uncons", "tail" : "(coll: C[A]): Option[(A, C[A])]", "member" : "io.dylemma.spac.Unconsable.uncons", "link" : "io\/dylemma\/spac\/Unconsable.html#uncons[A](coll:C[A]):Option[(A,C[A])]", "kind" : "abstract def"}], "shortDescription" : "Typeclass for collections that can be efficiently split into ahead element and a tail collection as long as they are not empty."}], "io.dylemma.spac.interop.fs2" : [{"name" : "io.dylemma.spac.interop.fs2.ParserFs2Ops", "shortDescription" : "Since Parser is by design a stream consumer, we can provide the parseF helper whichconsumes a fs2.Stream in an effectful way.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserFs2Ops[In, Out]) => Boolean, msg: => Any): ParserFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserFs2Ops[In, Out]) => Boolean): ParserFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ParserFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ParserFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ParserFs2Ops[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ParserFs2Ops[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "parseF", "tail" : "(stream: Stream[F, In])(compiler: Compiler[F, G], G: MonadError[G, Throwable], pos: CallerPos): G[Out]", "member" : "io.dylemma.spac.interop.fs2.ParserFs2Ops.parseF", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#parseF[F[_],G[_]](stream:fs2.Stream[F,In])(implicitcompiler:fs2.Compiler[F,G],implicitG:cats.MonadError[G,Throwable],implicitpos:io.dylemma.spac.CallerPos):G[Out]", "kind" : "def"}, {"label" : "toPipe", "tail" : "(pos: CallerPos): Pipe[F, In, Out]", "member" : "io.dylemma.spac.interop.fs2.ParserFs2Ops.toPipe", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#toPipe[F[_]](implicitpos:io.dylemma.spac.CallerPos):fs2.Pipe[F,In,Out]", "kind" : "def"}, {"member" : "io.dylemma.spac.interop.fs2.ParserFs2Ops#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/interop\/fs2\/package$$ParserFs2Ops.html", "kind" : "class"}, {"name" : "io.dylemma.spac.interop.fs2.SourceFs2Ops", "shortDescription" : "Since Source is a synchronous-only encoding of the Resource pattern, it canbe converted to a cats.effect.Resource by suspending its open and closeoperations in a Sync effect type F, yielding an Iterator[A] as its value.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SourceFs2Ops[A]) => Boolean, msg: => Any): SourceFs2Ops[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SourceFs2Ops[A]) => Boolean): SourceFs2Ops[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SourceFs2Ops[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SourceFs2Ops[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SourceFs2Ops[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SourceFs2Ops[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toStream", "tail" : "(chunkSize: Int)(F: Sync[F], FM: MonadCancel[F, _]): Stream[F, A]", "member" : "io.dylemma.spac.interop.fs2.SourceFs2Ops.toStream", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#toStream[F[_]](chunkSize:Int)(implicitF:cats.effect.Sync[F],implicitFM:cats.effect.MonadCancel[F,_]):fs2.Stream[F,A]", "kind" : "def"}, {"label" : "toResource", "tail" : "(arg0: Sync[F]): Resource[F, Iterator[A]]", "member" : "io.dylemma.spac.interop.fs2.SourceFs2Ops.toResource", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#toResource[F[_]](implicitevidence$1:cats.effect.Sync[F]):cats.effect.Resource[F,Iterator[A]]", "kind" : "def"}, {"member" : "io.dylemma.spac.interop.fs2.SourceFs2Ops#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/interop\/fs2\/package$$SourceFs2Ops.html", "kind" : "class"}, {"name" : "io.dylemma.spac.interop.fs2.TransformerFs2Ops", "shortDescription" : "Since a Transformer is by design a stream transformation, we can naturally provide a conversion from Transformerto fs2.Pipe", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TransformerFs2Ops[In, Out]) => Boolean, msg: => Any): TransformerFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TransformerFs2Ops[In, Out]) => Boolean): TransformerFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TransformerFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TransformerFs2Ops[In, Out]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TransformerFs2Ops[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TransformerFs2Ops[In, Out], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toPipe", "tail" : "(pos: CallerPos): Pipe[F, In, Out]", "member" : "io.dylemma.spac.interop.fs2.TransformerFs2Ops.toPipe", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#toPipe[F[_]](implicitpos:io.dylemma.spac.CallerPos):fs2.Pipe[F,In,Out]", "kind" : "def"}, {"member" : "io.dylemma.spac.interop.fs2.TransformerFs2Ops#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/dylemma\/spac\/interop\/fs2\/package$$TransformerFs2Ops.html", "kind" : "class"}]};